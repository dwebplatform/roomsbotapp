[{"D:\\desctop\\roombot\\front-end\\src\\index.js":"1","D:\\desctop\\roombot\\front-end\\src\\App.js":"2","D:\\desctop\\roombot\\front-end\\src\\reportWebVitals.js":"3","D:\\desctop\\roombot\\front-end\\src\\components\\OrderComponent.js":"4","D:\\desctop\\roombot\\front-end\\src\\components\\AspireComponent.js":"5","D:\\desctop\\roombot\\front-end\\src\\reducers\\index.js":"6","D:\\desctop\\roombot\\front-end\\src\\reducers\\actions.js":"7","D:\\desctop\\roombot\\front-end\\src\\util\\serviceUtil.js":"8","D:\\desctop\\roombot\\front-end\\src\\components\\FilterOrderComponent.js":"9","D:\\desctop\\roombot\\front-end\\src\\components\\NavigationComponent.js":"10","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\Header.js":"11","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\OrderPage.js":"12","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\ApartmentPage.js":"13","D:\\desctop\\roombot\\front-end\\src\\util\\helpers.js":"14","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\SubWayPage.js":"15","D:\\desctop\\roombot\\front-end\\src\\reducers\\redux-helpers.js":"16","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\ServiceForApartmentPage.js":"17"},{"size":865,"mtime":1612180109018,"results":"18","hashOfConfig":"19"},{"size":1331,"mtime":1612335516357,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":4037,"mtime":1611933728615,"results":"22","hashOfConfig":"19"},{"size":380,"mtime":1612093481754,"results":"23","hashOfConfig":"19"},{"size":11073,"mtime":1612342018792,"results":"24","hashOfConfig":"19"},{"size":13411,"mtime":1612341830377,"results":"25","hashOfConfig":"19"},{"size":6700,"mtime":1612341508629,"results":"26","hashOfConfig":"19"},{"size":1389,"mtime":1611932669435,"results":"27","hashOfConfig":"19"},{"size":1558,"mtime":1612335589535,"results":"28","hashOfConfig":"19"},{"size":280,"mtime":1612094357319,"results":"29","hashOfConfig":"19"},{"size":3363,"mtime":1612270748992,"results":"30","hashOfConfig":"19"},{"size":19548,"mtime":1612333976900,"results":"31","hashOfConfig":"19"},{"size":270,"mtime":1612248747883,"results":"32","hashOfConfig":"19"},{"size":2931,"mtime":1612341954875,"results":"33","hashOfConfig":"19"},{"size":634,"mtime":1612333873794,"results":"34","hashOfConfig":"19"},{"size":2898,"mtime":1612342046543,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"18i1ihc",{"filePath":"39","messages":"40","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"38"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"38"},"D:\\desctop\\roombot\\front-end\\src\\index.js",[],["83","84"],"D:\\desctop\\roombot\\front-end\\src\\App.js",["85","86","87","88","89","90","91","92","93","94","95","96","97"],"import { useState, useEffect } from 'react'\nimport { OrderComponent } from './components/OrderComponent';\nimport { NavigationComponent } from './components/NavigationComponent';\nimport { FilterOrderComponent } from './components/FilterOrderComponent';\nimport { AspireComponent } from './components/AspireComponent';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getOrdersAction } from './reducers/actions';\nimport { BrowserRouter as Router, Link, Route, Switch, useParams, useRouteMatch } from 'react-router-dom';\nimport { Header } from './routercomponents/Header';\nimport { OrderPage } from './routercomponents/OrderPage';\nimport { ApartmentPage } from './routercomponents/ApartmentPage';\nimport { SubWayPage } from './routercomponents/SubWayPage';\nimport {ServiceForApartmentPage} from './routercomponents/ServiceForApartmentPage';\n\n//TODO : LOGIN PAGE\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route exact path='/orders'>\n          <OrderPage />\n        </Route>\n        <Route path='/apartments'>\n          <ApartmentPage />\n        </Route>\n        <Route path='/subways'>\n          <SubWayPage />\n        </Route>\n        <Route path='/services'>\n          <ServiceForApartmentPage/>\n        </Route>\n      </Switch>\n    </>\n  );\n}\nexport default App;\n","D:\\desctop\\roombot\\front-end\\src\\reportWebVitals.js",[],"D:\\desctop\\roombot\\front-end\\src\\components\\OrderComponent.js",["98"],"import { useField } from 'react-hooks-lib';\nimport { useDispatch } from 'react-redux';\nimport { updateStatusAction } from '../reducers/actions';\nimport './order.css';\n\nconst statuses = {\n    0: 'Новый заказ',\n    1: 'Аннулирован',\n    2: 'Совершен'\n};\nexport const OrderComponent = ({ id, className, fullInfo, status }) => {\n    //TODO: найти песню i like being\n    const { client, rooms } = fullInfo;\n    let copiedClient = client || {};\n    //TODO: сделать пагинацию в двух классах Service и Dummy\n    const { value: selectedStatus, bind } = useField(status + '');\n    const dispatch = useDispatch();\n    const handleChangeStatus = () => {\n        // dispatch async ...\n        dispatch(updateStatusAction(selectedStatus, id));\n    }\n    return (<div className={`order-container ${className ? className : ''}`}>\n        <div className={`order ${status == 0 ? 'order__status-new' : ''} `}>\n            <div className=\"order__client\">\n                <h3>Клиент</h3>\n                <div className=\"order__client-info \">\n                    <span className=\"order__client-field\">Имя:{copiedClient.name}</span>\n                    <span className=\"order__client-field\">Фамилия:{copiedClient.secondName}</span>\n                    <span className=\"order__client-field\">Возраст:{copiedClient.age}</span>\n                    <span className=\"order__client-field\">Телефон:{copiedClient.phone}</span>\n                    <span className=\"order__client-field\">mail:{copiedClient.email}</span>\n                </div>\n            </div>\n            <div className=\"order__apartments\">\n                <div className=\"order__apartments-items\">\n                    <h3 className=\"order__apartments-header\"><span>Квартиры</span><span> Статус : {statuses[status]}</span></h3>\n                    {\n                        Array.isArray(rooms) && rooms.map((room, index) => {\n                            return (<div className=\"order__apartments-item\" key={index}>\n                                <span className=\"order__apartment-field\">адрес:{room.address}</span>\n                                <span className=\"order__apartment-field\">кол-во гостей:{room.personsAmount}</span>\n                                <span className=\"order__apartment-field\">Наличие животных: {room.withAnimals ? 'Да' : 'Нет'}</span>\n                                <span className=\"order__apartment-field\">Дети:{room.withChilds ? 'Да' : 'Нет'}</span>\n                                {/* TODO: сделать тут услуги из бд-ки */}\n                                <span className=\"order__apartment-field\">Услуги:</span>\n                                <span className=\"order__apartment-field\">Время заезда:{room.fromDate}</span>\n                                <span className=\"order__apartment-field\">Время выезда:{room.toDate}</span>\n                                <span className=\"order__apartment-field\">Цена за апартаменты:{room.price}</span>\n                                <span className=\"order__apartment-field\">Цена c учетом услуг:{room.totalPrice}</span>\n                            </div>)\n                        })\n                    }\n                    <div className=\"order__status-btn-container\">\n                        <select className=\"order__status-selector\" {...bind}>\n                            {\n                                Object.keys(statuses).map((statusId) => {\n                                    return <option key={statusId} value={statusId}>{statuses[statusId]}</option>\n                                })\n                            }\n                        </select>\n                        <button className=\"order__status-btn\" onClick={handleChangeStatus}>Сменить статус </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>);\n}","D:\\desctop\\roombot\\front-end\\src\\components\\AspireComponent.js",["99"],"export const AspireComponent = () => {\n    return (<div style={{\n        position: 'fixed',\n        top: 0,\n        zIndex: 10,\n        left: '85%',\n\n    }}>\n        <img style={{\n            width: '200px',\n            borderRadius: '50%',\n            height: '200px'\n        }} src=\"https://i.pinimg.com/originals/32/62/b5/3262b55de055134f1a10f886c30c808f.jpg\" />\n    </div>);\n}","D:\\desctop\\roombot\\front-end\\src\\reducers\\index.js",[],"D:\\desctop\\roombot\\front-end\\src\\reducers\\actions.js",["100","101","102","103","104","105","106","107","108","109","110","111"],"export const GET_ORDERS = \"GET_ORDERS\";\nexport const GET_APARTMENTS = \"GET_APARTMENTS\";\nexport const GET_APARTMENT_BY_ID = \"GET_APARTMENT_BY_ID\";\nexport const GET_APARTMENT_BY_ID_ERROR = \"GET_APARTMENT_BY_ID_ERROR\";\nexport const GENERAL_ERROR = \"GENERAL_ERROR\";\nexport const UPDATE_ORDER_STATUS = \"UPDATE_ORDER_STATUS\";\nexport const CREATE_APARTMENT = \"CREATE_APARTMENT\";\nexport const CREATE_APARTMENT_ERROR = \"CREATE_APARTMENT_ERROR\";\nexport const GET_ALL_APARTMENT_ERROR = \"GET_ALL_APARTMENT_ERROR\";\n\nexport const IMAGE_ADD_TO_APARTMENT_SUCESS = \"IMAGE_ADD_TO_APARTMENT_SUCESS\";\nexport const IMAGE_ADD_TO_APARTMENT_FAIL = \"IMAGE_ADD_TO_APARTMENT_FAIL\";\n\nexport const DELETE_APARTMENT_IMAGE_SUCCESS = \"DELETE_APARTMENT_IMAGE_SUCCESS\";\nexport const DELETE_APARTMENT_IMAGE_ERROR = \"DELETE_APARTMENT_IMAGE_ERROR\";\nexport const GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS = \"GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS\";\nexport const GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR = \"GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR\";\n\nexport const ADD_SUBWAY_TO_APARTMENT_SUCCESS = \"ADD_SUBWAY_TO_APARTMENT_SUCCESS\";\nexport const ADD_SUBWAY_TO_APARTMENT_ERROR = \"ADD_SUBWAY_TO_APARTMENT_ERROR\";\n\nexport const DELETE_APARTMENT_BY_ID_SUCCESS = \"DELETE_APARTMENT_BY_ID_SUCCESS\";\nexport const DELETE_APARTMENT_BY_ID_ERROR = \"DELETE_APARTMENT_BY_ID_ERROR\";\n\nexport const REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS = \"REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS\";\nexport const REMOVE_SUBWAY_FROM_APARTMENT_ERROR = \"REMOVE_SUBWAY_FROM_APARTMENT_ERROR\";\n\nexport const ADD_SUBWAY_SUCCESS = \"ADD_SUBWAY_SUCCESS\";\nexport const ADD_SUBWAY_ERROR = \"ADD_SUBWAY_ERROR\";\n\nexport const GET_SERVICE_TO_APARTMENT_SUCCESS = \"GET_SERVICE_TO_APARTMENT_SUCCESS\";\nexport const GET_SERVICE_TO_APARTMENT_ERROR = \"GET_SERVICE_TO_APARTMENT_ERROR\";\n\nexport const REMOVE_SERVICE_FROM_APARTMENT_SUCCESS = \"REMOVE_SERVICE_FROM_APARTMENT_SUCCESS\";\nexport const REMOVE_SERVICE_FROM_APARTMENT_ERROR = \"REMOVE_SERVICE_FROM_APARTMENT_ERROR\";\n\nexport const GET_ALL_SERVICES_SUCCESS = \"GET_ALL_SERVICES_SUCCESS\";\nexport const GET_ALL_SERVICES_ERROR = \"GET_ALL_SERVICES_ERROR\";\n\nexport const ADD_SERVICE_TO_APARTMENT_SUCCESS = \"ADD_SERVICE_TO_APARTMENT_SUCCESS\";\nexport const ADD_SERVICE_TO_APARTMENT_ERROR = \"ADD_SERVICE_TO_APARTMENT_ERROR\";\n\nexport const UPDATE_SERVICE_NAME_SUCCESS = \"UPDATE_SERVICE_NAME_SUCCESS\";\nexport const UPDATE_SERVICE_NAME_ERROR = \"UPDATE_SERVICE_NAME_ERROR\";\n\nexport const UPDATE_BASIC_FIELDS_SUCCESS = \"UPDATE_BASIC_FIELDS_SUCCESS\";\n\nexport const DELETE_SUBWAY_BY_ID_SUCCESS =\"DELETE_SUBWAY_BY_ID_SUCCESS\";\nexport const DELETE_SUBWAY_BY_ID_ERROR =\"DELETE_SUBWAY_BY_ID_ERROR\";\n\n\n\nexport const handleDeleteSubWayAction=(subwayId)=>async (dispatch, getState)=>{\n    let { data } = await getState().serviceUtilContainer.deleteSubWayById(subwayId);\n    console.log(data)\n    if(data.status=='ok'){\n        dispatch({\n\n            type:DELETE_SUBWAY_BY_ID_SUCCESS,\n            payload:{\n                subways:data.subways\n            }\n        });\n    } else {\n        dispatch({\n            type:DELETE_SUBWAY_BY_ID_ERROR\n        });\n        \n    }\n    \n}\nexport const updateServiceNameAction = (serviceId, newServiceName) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.updateServiceName(serviceId, newServiceName);\n    if (data.status === 'ok') {\n        dispatch({\n            payload: {\n                services: data.services,\n            },\n            type: UPDATE_SERVICE_NAME_SUCCESS\n        })\n    } else {\n        dispatch({\n            type: UPDATE_SERVICE_NAME_ERROR\n\n        })\n    }\n}\n\nexport const addServiceToApartmentAction = (apartmentId, selectedServiceId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.addServiceToApartment(apartmentId, selectedServiceId);\n    if (data.status == 'ok') {\n        dispatch({\n            type: ADD_SERVICE_TO_APARTMENT_SUCCESS,\n            payload: {\n                service: data.service,\n            }\n        })\n    } else {\n        dispatch({\n            type: ADD_SERVICE_TO_APARTMENT_ERROR\n        });\n    }\n\n\n}\nexport const getAllServiceAction = () => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.getAllServices();\n    if (data.status == 'ok') {\n        dispatch({\n            type: GET_ALL_SERVICES_SUCCESS,\n            payload: {\n                services: data.services\n            }\n        });\n    } else {\n        dispatch({\n            type: GET_ALL_SERVICES_ERROR,\n            payload: {\n                services: [],\n\n            }\n        });\n    }\n\n\n}\nexport const deleteServiceFromApartmentAction = (apartmentId, serviceId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.deleteServiceFromApartmentAction(apartmentId, serviceId);\n    if (data.status === 'ok') {\n        dispatch({\n            type: REMOVE_SERVICE_FROM_APARTMENT_SUCCESS,\n            payload: {\n                apartmentId, serviceId\n            }\n        });\n    } else {\n        dispatch({\n            type: REMOVE_SERVICE_FROM_APARTMENT_ERROR,\n            payload: {\n                error: true,\n                loading: false\n            }\n        })\n    }\n}\n\nexport const getServicesForApartmentAction = (apartmentId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.getServicesForApartment(apartmentId);\n    console.log({ data });\n    if (data.status == 'ok') {\n        dispatch({\n            type: GET_SERVICE_TO_APARTMENT_SUCCESS,\n            payload: {\n                services: data.services,\n                error: false,\n                loading: false\n            }\n        });\n    } else {\n        dispatch({\n            type: GET_SERVICE_TO_APARTMENT_ERROR,\n            payload: {\n                services: [],\n                error: true,\n                loading: false,\n            }\n        });\n    }\n}\n\nexport const addSubWayAction = ({ name, geo }) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.addSubway(name, geo);\n    if (data.status === 'ok') {\n        dispatch({\n            type: ADD_SUBWAY_SUCCESS,\n            payload: {\n                msg: 'Вы успешно добавили новое метро'\n            }\n        })\n    } else {\n        dispatch({\n            type: ADD_SUBWAY_ERROR,\n            payload: {\n                msg: 'Произошла какая-то ошибка при добавлении метро'\n            }\n        });\n    }\n}\n\nexport const removeSubWayFromApartmentAction = (apartmentId, subwayId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.removeSubWayFromApartment(apartmentId, subwayId);\n\n    if (data.status === 'ok') {\n        dispatch({\n            type: REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS,\n        });\n    } else {\n        dispatch({\n            type: REMOVE_SUBWAY_FROM_APARTMENT_ERROR\n        });\n    }\n}\n\nexport const deleteApartmentByIdAction = (apartmentId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.deleteApartmentById(apartmentId);\n    console.log(data);\n    if (data.status == 'ok') {\n        dispatch({\n            type: DELETE_APARTMENT_BY_ID_SUCCESS\n        });\n    } else {\n        dispatch({ type: DELETE_APARTMENT_BY_ID_ERROR });\n    }\n\n\n}\nexport const addSubwayForApartmentAction = (addedSubwayId, apartmentId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.addSubwayForApartment(addedSubwayId, apartmentId);\n    if (data.status == 'ok') {\n        dispatch({\n            type: ADD_SUBWAY_TO_APARTMENT_SUCCESS,\n\n        })\n    } else {\n        dispatch({\n            type: ADD_SUBWAY_TO_APARTMENT_ERROR\n        })\n    }\n}\n\nexport const getAllSubWaysAction = (apartmentId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.getAllSubway(apartmentId);\n    if (data.status == 'ok') {\n        dispatch({\n            type: GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS,\n            payload: {\n                subways: data.subways,\n                error: false,\n                loading: false\n            }\n        });\n    } else {\n        dispatch({\n            type: GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR,\n            payload: {\n                subways: [],\n                error: true,\n                loading: false\n            }\n        });\n    }\n}\nexport const addNewImageToApartmentAction = (apartmentId, imageFileArray) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.addNewImageToApartment(apartmentId, imageFileArray);\n    console.log(data);\n    if (data.status == 'ok') {\n        dispatch({\n            type: IMAGE_ADD_TO_APARTMENT_SUCESS,\n        });\n    } else {\n        dispatch({\n            type: IMAGE_ADD_TO_APARTMENT_FAIL,\n        });\n    }\n}\nexport const updateBasicApartmentFieldsAction = (apartmentId, fields) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.updateApartmentById(apartmentId, fields);\n    console.log({ data });\n    dispatch({\n        type: UPDATE_BASIC_FIELDS_SUCCESS\n    });\n\n};\n\nexport const deleteApartmentImageByIndexAction = (apartmentId, imageIndex) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.deleteApartmentImageByIndex(apartmentId, imageIndex);\n    console.log(data);\n    if (data.status == 'ok') {\n        dispatch({\n            type: DELETE_APARTMENT_IMAGE_SUCCESS\n        });\n    } else {\n        dispatch({\n            type: DELETE_APARTMENT_IMAGE_ERROR\n        });\n    }\n\n}\nexport const getApartmentByIdAction = (apartmentId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.getApartmentById(apartmentId);\n    if (data.status === 'ok') {\n        dispatch({\n            type: GET_APARTMENT_BY_ID,\n            payload: {\n                apartment: data.apartment,\n                loading: false,\n                error: false\n            }\n        });\n    } else {\n        dispatch({\n            type: GET_APARTMENT_BY_ID_ERROR,\n            payload: {\n                error: true,\n                loading: false,\n                data: {}\n            }\n        })\n    }\n\n}\nexport const createOrderAction = (formDataObject) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.createApartment(formDataObject);\n    if (data.status == 'ok') {\n        dispatch({ type: CREATE_APARTMENT, payload: data });\n    } else {\n        dispatch({ type: CREATE_APARTMENT_ERROR })\n    }\n\n}\n\nexport const getAllApartmentsAction = () => async (dispatch, getState) => {\n    try {\n        let { data } = await getState().serviceUtilContainer.getAllApartments();\n        if (data.status == 'ok') {\n            dispatch({\n                type: GET_APARTMENTS,\n                payload: {\n                    apartments: data.apartments,\n                    error: false,\n                    loading: false\n                }\n            })\n        } else {\n            dispatch({\n                type: GET_ALL_APARTMENT_ERROR,\n                payload: {\n                    error: true,\n                    loading: false\n                }\n            });\n        }\n\n    } catch (e) {\n        dispatch({\n            type: GET_ALL_APARTMENT_ERROR,\n            payload: {\n                error: true,\n                loading: false\n            }\n        })\n    }\n}\nexport const updateStatusAction = (selectedStatus, orderId) => async (dispatch, getState) => {\n    try {\n        let data = await getState().serviceUtilContainer.updateOrderStatus(selectedStatus, orderId);\n        if (data.status === 'ok') {\n            dispatch({\n                type: UPDATE_ORDER_STATUS,\n                payload: {\n                    status: \"ok\"\n                }\n            });\n        } else {\n            dispatch({\n                type: GENERAL_ERROR,\n                payload: {\n                    status: \"error\",\n\n                }\n            });\n        }\n    } catch (e) {\n        dispatch({ type: GENERAL_ERROR });\n    }\n}\nexport const getOrdersAction = (page, { filterObject }) => async (dispatch, getState) => {\n    try {\n        page = page || 1;\n        // add filter params = fromDate, toDate\n        console.log('DISPATCHED FILTER OBJECT NOW', filterObject);\n        let data = await getState().serviceUtilContainer.getOrders(page, { filterObject });\n        if (data.status == 'ok') {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    data: data.orders,\n                    loading: false,\n                    error: false\n                }\n            });\n        } else {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    data: [],\n                    msg: 'Не удалось получить ни одного заказа',\n                    loading: false,\n                    error: true\n                }\n            })\n        }\n\n    } catch (e) {\n        dispatch({\n            type: GET_ORDERS,\n            payload: {\n                data: [],\n                loading: false,\n                error: true,\n                msg: 'Не удалось получить ни одного заказа'\n            }\n        });\n    }\n}","D:\\desctop\\roombot\\front-end\\src\\util\\serviceUtil.js",["112","113","114"],"\nimport axios from 'axios';\nexport class ServiceUtilContainer {\n    constructor() {\n    }\n\n\n    async deleteSubWayById(subwayId){\n        let response = await axios.post(`/api/subway/delete/${subwayId}`);\n        return response;\n    }\n    async updateServiceName(serviceId, newServiceName){\n        let response = await axios.post('/api/services/update',\n                { serviceId, \n                  newServiceName});\n        return response;\n    }\n    async addServiceToApartment(apartmentId, selectedServiceId) {\n\n        let response = await axios.post('/api/services/add-to-apartment', {\n            apartmentId,\n            selectedServiceId\n        });\n        return response;\n    }\n\n    async getAllServices() {\n        let response = await axios.get('/api/services/all');\n        return response;\n    }\n\n    async deleteServiceFromApartmentAction(apartmentId, serviceId) {\n        let response = await axios.post('/api/services/remove-from-apartment', {\n            apartmentId,\n            serviceId\n        });\n        return response;\n\n    }\n    async getServicesForApartment(apartmentId) {\n        let response = await axios.get(`/api/services/all-for-apartment/${apartmentId}`);\n        return response;\n    }\n    async addSubway(name, geo) {\n        let response = await axios.post('/api/subway/add', { name, geo });\n        return response;\n    }\n    async removeSubWayFromApartment(apartmentId, subwayId) {\n        let response = await axios.post(`/api/apartments/${apartmentId}/remove-subway/${subwayId}`);\n        return response;\n    }\n    /*\n    * \n    route(\"/api/subway/all)\" */\n    async getAllSubWays() {\n        let response = await axios.get('/api/subway/all');\n        return response;\n    }\n    async deleteApartmentById(apartmentId) {\n        let response = await axios.post(`/api/apartments/delete/${apartmentId}`);\n        return response;\n    }\n    async addSubwayForApartment(addedSubwayId, apartmentId) {\n        let response = await axios.post('/api/apartments-subway/add-to-apartment', {\n            addedSubwayId, apartmentId\n        });\n        return response;\n    }\n    async getAllSubway(apartmentId = null) {\n        let url = '/api/apartments-subway/allsubway-for-apartment/';\n        if (typeof apartmentId !== 'null') {\n            url += apartmentId;\n        }\n        let response = axios.get(url);\n        return response;\n    }\n    async addNewImageToApartment(apartmentId, imageFilesArray) {\n        let formData = new FormData();\n        imageFilesArray.forEach((file, index) => {\n            formData.append(`apartment_added_image_${index}`, file);\n        });\n        let response = await axios.post(`/api/apartments/add-images/${apartmentId}`, formData);\n        return response;\n    }\n    async updateApartmentById(apartmentId, fields) {\n        let response = await axios.post(`/api/apartments/update-basic-fields/${apartmentId}`, fields);\n        return response;\n    }\n    async deleteApartmentImageByIndex(apartmentId, imageIndex) {\n        let response = await axios.post(`/api/apartments/delete-image-by-index`, {\n            apartmentId, imageIndex\n        });\n        return response;\n    }\n    async getApartmentById(apartmentId) {\n        let response = await axios.get(`/api/apartments/${apartmentId}`);\n        return response;\n    }\n    async getAllApartments() {\n        let response = await axios.get('/api/apartments/all-without-pagination');\n        return response;\n    }\n    async createApartment(data) {\n        // формируем formData\n        let formData = new FormData();\n        let index = 1;\n        data.images.forEach((image) => {\n            formData.append(`image_${index}`, image);\n            index++;\n        });\n        delete data['images'];\n        console.log({ data });\n        // create formData \n        for (let key in data) {\n            formData.append(key, data[key]);\n        }\n        let response = await axios.post('/api/apartments/create', formData);\n        return response;\n    }\n    async updateOrderStatus(selectedStatus, orderId) {\n        try {\n            let response = await fetch('/api/order/update-status', {\n                method: 'POST',\n                credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ selectedStatus, orderId })\n            });\n            let data = response.json();\n            return data;\n        } catch (e) {\n            console.log(e);\n            return {\n                status: 'error'\n            };\n        }\n    }\n    async getOrders(page = 1, { filterObject }) {\n        let finalUrl = '/api/order/all/?limit=5&page=' + page;\n        if (filterObject.fromDate) {\n            finalUrl += '&from=' + filterObject.fromDate\n        }\n        if (filterObject.toDate) {\n            finalUrl += '&to=' + filterObject.toDate;\n        }\n        let response = await fetch(finalUrl);\n        let data = await response.json();\n        console.log(filterObject, \"FILTER OBJECT\")\n        return data;\n    }\n}\n\n\nexport class DummyContainer {\n    constructor() {\n    }\n    async updateOrderStatus(selectedStatus, orderId) {\n\n    }\n    async getOrders(page = 1, { filterObject }) {\n        return { \"status\": \"ok\", \"orders\": [{ \"fullInfo\": { \"client\": { \"name\": \"Карл\", \"secondname\": \"Марков\", \"email\": \"dummy@mail.ru\", \"phone\": 88005553535 }, \"rooms\": [{ \"id\": 1, \"address\": \"ул Глупнинская дом 9 кв 104\", \"price\": 3600, \"roomAmount\": 3, \"services\": \"['Уборка','Стирка','Гладка']\", \"withChilds\": true, \"withAnimals\": false }] }, \"id\": 5, \"status\": 0, \"createdAt\": \"2021-01-24T13:39:23.000Z\", \"updatedAt\": \"2021-01-24T13:39:23.000Z\" }, { \"fullInfo\": { \"client\": { \"name\": \"Bob\", \"secondname\": \"Marlie\", \"email\": \"karpov-vb-1996@mail.ru\", \"phone\": 8808555 }, \"rooms\": [{ \"id\": 1, \"address\": \"ул Тушинская дом 3 кв 67\", \"price\": 2800, \"roomAmount\": 3, \"services\": \"['Уборка','Стирка','Гладка']\", \"withChilds\": true, \"withAnimals\": false }] }, \"id\": 11, \"status\": 0, \"createdAt\": \"2021-01-24T14:01:39.000Z\", \"updatedAt\": \"2021-01-24T14:01:39.000Z\" }, { \"fullInfo\": { \"client\": { \"name\": \"Bob\", \"secondname\": \"Marlie\", \"email\": \"karpov-vb-1996@mail.ru\", \"phone\": 8808555 }, \"rooms\": [{ \"id\": 1, \"address\": \"ул Тушинская дом 3 кв 67\", \"price\": 2800, \"personsAmount\": 3, \"roomAmount\": 3, \"services\": \"['Уборка','Стирка','Гладка']\", \"withChilds\": true, \"withAnimals\": false }] }, \"id\": 12, \"status\": 0, \"createdAt\": \"2021-01-24T14:07:52.000Z\", \"updatedAt\": \"2021-01-24T14:07:52.000Z\" }] }\n    }\n}","D:\\desctop\\roombot\\front-end\\src\\components\\FilterOrderComponent.js",[],"D:\\desctop\\roombot\\front-end\\src\\components\\NavigationComponent.js",["115"],"import { Link } from 'react-router-dom';\n\nexport const NavigationComponent = () => {\n\n    return (<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item active\">\n                    <Link className=\"nav-link\" to=\"/\">Главная <span className=\"sr-only\"></span></Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/login\" >Войти</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/orders\" >Заказы</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/apartments\">Квартиры</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/subways\">Метро</Link>\n                </li>\n                 \n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/services\">Услуги</Link>\n                </li>\n            </ul>\n        </div>\n    </nav>)\n}","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\Header.js",[],"D:\\desctop\\roombot\\front-end\\src\\routercomponents\\OrderPage.js",["116","117","118","119","120"],"\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { OrderComponent } from '../components/OrderComponent';\nimport { FilterOrderComponent } from '../components/FilterOrderComponent';\nimport { getOrdersAction } from '../reducers/actions';\nimport { useRouteMatch } from 'react-router-dom';\nexport const OrderPage = () => {\n\n    const dispatch = useDispatch();\n    const [curPage, setPage] = useState(1);\n    const [filterObject, setFilterObject] = useState({\n        fromDate: new Date().getTime() / 1000,\n        toDate: new Date().getTime() / 1000 + 30 * 24 * 3600\n    });\n    const handleFilterChange = ({ fromDate, toDate }) => {\n        let unixFromDate = Date.parse(fromDate) / 1000;\n        let unixToDate = Date.parse(toDate) / 1000;\n        // затем setим filterObject  фильтр в надежде что заработает\n        setFilterObject({\n            fromDate: unixFromDate,\n            toDate: unixToDate\n        });\n    }\n    useEffect(() => {\n        //TODO: check protected\n        // ! получаем  заказы\n        dispatch(getOrdersAction(curPage, { filterObject }));\n    }, [curPage, filterObject]);\n    const { data: orders, loading, error } = useSelector((store) => store.orders);\n\n    function OrderList() {\n        return (orders && orders.map((item, i) => {\n            return <OrderComponent id={item.id} className=\"main-container__item\" fullInfo={item.fullInfo} status={item.status} key={i} />\n        }));\n\n    }\n    return (\n        <section className=\"app\">\n            <div className=\"paddinger\" >\n                {/*//TODO: добавить  в фильтр поле статус !!!  */}\n                <FilterOrderComponent curentFilter={{ ...filterObject }} filterHandleChange={handleFilterChange} />\n            </div>\n            <main className=\"main-container\">\n                {error && <pre>{JSON.stringify(error)}</pre>}\n                <OrderList />\n            </main>\n            <nav className=\"main-navigation\" aria-label=\"Orders navigation \">\n                <ul className=\"pagination\">\n                    <li className=\"page-item\">\n                        <a className=\"page-link my-link\" onClick={(e) => {\n                            e.preventDefault();\n                            if (curPage <= 0) {\n                                return;\n                            } else {\n                                setPage((p) => p - 1);\n                            }\n                        }} aria-label=\"Previous\">\n                            <span aria-hidden=\"true\">&laquo;</span>\n                            <span className=\"sr-only\">Previous</span>\n                        </a>\n                    </li>\n                    <li className=\"page-item \"><a className=\"page-link\" href=\"!#\">...</a></li>\n                    <li className=\"page-item\">\n                        <a className=\"page-link my-link\" onClick={(e) => {\n                            e.preventDefault();\n                            setPage((p) => p + 1);\n                        }} aria-label=\"Next\">\n                            <span aria-hidden=\"true\">&raquo;</span>\n                            <span className=\"sr-only\" >Next</span>\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n        </section>\n    );\n}","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\ApartmentPage.js",["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"\nimport axios from 'axios';\nimport { useEffect, useState, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useField } from 'react-hooks-lib';\nimport { BsXCircle } from 'react-icons/bs';\nimport './apartmentpage.css';\nimport { objectHasProps } from '../util/helpers';\n\n\nimport { addServiceToApartmentAction, getAllServiceAction, createOrderAction, deleteServiceFromApartmentAction, getServicesForApartmentAction, removeSubWayFromApartmentAction, deleteApartmentByIdAction, addSubwayForApartmentAction, deleteApartmentImageByIndexAction, getAllSubWaysAction, getAllApartmentsAction, getApartmentByIdAction, updateBasicApartmentFieldsAction, addNewImageToApartmentAction } from '../reducers/actions';\nimport { BrowserRouter, Redirect, Link, Route, Switch, useParams, useRouteMatch } from 'react-router-dom';\n\n\nexport function useApartmentUpdate(apartmentId, apartment) {\n    const [editFields, setEditFields] = useState({\n        address: '',\n        price: 2500,\n        roomAmount: 1,\n        isVip: \"0\",\n        subways: [],\n    });\n    const dispatch = useDispatch();\n    useEffect(() => {\n\n        // console.log(objectHasProps(apartment,['address','price','roomAmount','isVip','Subways']));\n        if (objectHasProps(apartment, ['address', 'price', 'roomAmount', 'isVip', 'Subways'])) {\n            setEditFields({\n                address: apartment.address,\n                price: apartment.price,\n                roomAmount: apartment.roomAmount,\n                isVip: apartment.isVip ? \"1\" : \"0\",\n                subways: apartment.Subways,\n            });\n        }\n    }, [apartment, apartmentId]);\n    return [editFields, setEditFields];\n}\n\nconst EditApartment = () => {\n    let { apartmentId } = useParams();\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(getApartmentByIdAction(apartmentId))\n    }, [apartmentId]);\n\n    const { data: apartment, error, loading } = useSelector((state) => state.apartment);\n    const { apartmentImageDeleted, removeSubWayFromApartmentSuccess, successfullyAdded, deletedApartmentSuccess } = useSelector((state) => state.popupInfo);\n    const [editFields, setEditFields] = useApartmentUpdate(apartmentId, apartment);\n\n    const handleBasicFieldsChange = (e) => {\n        setEditFields((prevState) => {\n            return {\n                ...prevState,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n    // добавляем image для текущей комнаты\n    const [addedImages, setAddedImages] = useState([]);\n    const [preloadedUrls, setPreloadedUrls] = useState([]);// preloaded urls\n    const handleShowAddPreview = (e) => {\n        let files = e.target.files;\n        if (files.length > 0) {\n            let src = URL.createObjectURL(e.target.files[0]);\n            if (preloadedUrls.length < 10) {\n                setPreloadedUrls([...preloadedUrls, src]);\n            }\n            setAddedImages((prevState) => {\n                return [...prevState, e.target.files[0]];\n            });\n        }\n    }\n    if (removeSubWayFromApartmentSuccess) { // при успешном удалении перезагрузить\n        document.location.reload();\n    }\n    if (successfullyAdded) {// после добавления изображений\n        document.location.reload();\n    }\n    if (deletedApartmentSuccess) {// после удаления квартиры\n        return <Redirect to='/apartments' />;\n    }\n    if (apartmentImageDeleted) {// после каждого удаления изображения\n        document.location.reload();\n    }\n    const handleEditApartment = (e) => {\n        console.log(editFields);\n        dispatch(updateBasicApartmentFieldsAction(apartmentId, editFields));\n    }\n    function apartmentHasImage(apartment) {\n        return apartment.images && apartment.images.length\n    }\n    const handleDeleteImage = (imageIndex) => {\n        dispatch(deleteApartmentImageByIndexAction(apartmentId, imageIndex));\n    }\n\n    const handleAddImagesToApartment = () => {\n        dispatch(addNewImageToApartmentAction(apartmentId, [...addedImages]));\n    }\n    const handleDeleteApartment = () => {\n        dispatch(deleteApartmentByIdAction(apartmentId));\n    }\n    const handleDeleteSubWayFromApartment = (subwayId) => {\n        dispatch(removeSubWayFromApartmentAction(apartmentId, subwayId));\n    }\n    return (\n        <div className=\"edit-apartment-container\">\n            <div className=\"edit-apartmentcontainer__item form-group\">\n                <label htmlFor={\"apartment-adress-\" + apartmentId}>Адрес:</label>\n                <input id={\"apartment-adress-\" + apartmentId} type=\"text\" className=\"form-control\"\n                    value={editFields.address}\n                    name=\"address\"\n                    onChange={handleBasicFieldsChange}\n                />\n            </div>\n            <div className=\"edit-apartmentcontainer__item form-group\">\n                <label htmlFor={\"apartment-amount-\" + apartmentId}>Количество комнат:</label>\n                <input id={\"apartment-amount-\" + apartmentId} type=\"text\" className=\"form-control\"\n                    value={editFields.roomAmount}\n                    name=\"roomAmount\"\n                    onChange={handleBasicFieldsChange}\n                />\n            </div>\n            <div className=\"edit-apartmentcontainer__item form-group\">\n                <label htmlFor={\"apartment-price-\" + apartmentId}>Цена:</label>\n                <input id={\"apartment-price-\" + apartmentId} type=\"text\" className=\"form-control\"\n                    value={editFields.price}\n                    name=\"price\"\n                    onChange={handleBasicFieldsChange}\n                />\n            </div>\n\n            <div className=\"edit-apartmentcontainer__item form-group edit-apartmentcontainer__item--added-image\">\n                <div className=\"custom-file\">\n                    <input type=\"file\" className=\"custom-file-input\"\n                        id={\"add-image-input\" + apartmentId}\n                        onChange={handleShowAddPreview}\n                    />\n                    <label className=\"custom-file-label\" htmlFor={\"add-image-input\" + apartmentId}>Choose file</label>\n                </div>\n                <div className=\"container\" >\n                    <button className=\"btn btn-success\" onClick={handleAddImagesToApartment} style={{ fontWeight: 'bold', fontSize: '16px' }}>+</button>\n                </div>\n            </div>\n            <div className=\"preloaded-image-container\">\n                {preloadedUrls.map((item, index) => {\n                    return <div className=\"preloaded-image-container__item\" key={index} ><img className=\"img-thumbnail apartment-image\" src={item} /></div>\n                })}\n            </div>\n            <div className=\"edit-apartmentcontainer__item form-group\">\n                <label htmlFor={\"apartment-status-\" + apartmentId}>Статус квартиры:</label>\n                <select className=\"form-control\" id={\"apartment-status-\" + apartmentId}\n                    name=\"isVip\"\n                    value={editFields.isVip}\n                    onChange={handleBasicFieldsChange}\n                >\n                    <option value=\"1\">VIP</option>\n                    <option value=\"0\">Эконом</option>\n                </select>\n            </div>\n            <div className=\"all-subway-for-apartment-container d-flex\">\n\n                {(editFields.subways && editFields.subways.length) ?\n                    editFields.subways.map((subWayItem) => {\n                        return <span className=\"badge badge-light p-3 m-2 subway-item\" key={subWayItem.id}>\n                            {subWayItem.name}\n                            <BsXCircle onClick={() => handleDeleteSubWayFromApartment(subWayItem.id)} className=\"subway-item-icon\" />\n                        </span>\n                    }) : null\n                }\n            </div>\n            <EditSubWayInput apartmentId={apartmentId} />\n            <hr />\n            <EditServiceInput apartmentId={apartmentId} />\n            <div className=\"edit-apartmentcontainer__item\">\n                <label className=\"current-apartment-container__field-label\">Фотографии</label>\n                <div className=\"image-container\">\n                    {apartmentHasImage(apartment) ? apartment.images.map((image, imageIndex) => {\n                        return (<div className=\"image-item\" key={imageIndex} >\n                            <div className=\"delete-image\"><span className=\"delete-image-btn\" onClick={() => handleDeleteImage(imageIndex)}>X</span></div>\n                            <img className=\"img-thumbnail apartment-image\" src={image} />\n                        </div>)\n                    }) : null}\n                </div>\n            </div>\n\n\n            <div className=\"current-apartment-container__item\">\n                <div className=\"form-group\">\n                    <button className=\"btn btn-success w-100\" onClick={handleEditApartment}>ИЗМЕНИТЬ</button>\n                    <button className=\"btn btn-danger w-100 my-3\" onClick={handleDeleteApartment} >УДАЛИТЬ КВАРТИРУ</button>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n\n\n\nconst AddApartment = ({ handleAddApartmentListener }) => {\n    const [apartmentFields, setApartmentFields] = useState({\n        address: '',\n        isVip: 0,\n        roomAmount: 1,\n        images: [],\n        price: 2500\n    });\n    const handleAddressChange = (e) => {\n        setApartmentFields((prevState) => {\n            return {\n                ...prevState,\n                address: e.target.value\n            }\n        });\n    }\n    const handleIsVipChange = (e) => {\n        let value = e.target.value;\n        if (value == \"1\") {\n            setApartmentFields((prevState) => {\n                return {\n                    ...prevState,\n                    isVip: 1\n                }\n            })\n        } else {\n            setApartmentFields((prevState) => {\n                return {\n                    ...prevState,\n                    isVip: 0\n                }\n            })\n        }\n    }\n\n    const handlePriceChange = (e) => {\n        setApartmentFields((prevState) => {\n            return {\n                ...prevState,\n                price: e.target.value\n            }\n        });\n    }\n\n    const handleRoomAmountChange = (e) => {\n        setApartmentFields((prevState) => {\n            return {\n                ...prevState,\n                roomAmount: e.target.value\n            }\n        })\n    }\n    const handleImageLoad = async (e) => {\n        let file = e.target.files[0] || null;\n        if (!file) {\n            return;\n        }\n        setApartmentFields((prevState) => {\n            return {\n                ...prevState,\n                images: prevState.images.concat(file)\n            }\n        });\n    }\n    const handleAddApartment = async (e) => {\n        e.preventDefault();\n        let copyApatrmentsFields = { ...apartmentFields };\n        handleAddApartmentListener(copyApatrmentsFields);\n    }\n\n    return (<>  <div className=\"current-apartment-container__item\">\n        <div className=\"current-apartment-container__field\">\n            <label className=\"current-apartment-container__field-label\">Адрес:</label>\n            <input className=\"curretn-apartment-container__field-input form-control\" type=\"text\"\n                onChange={handleAddressChange}\n                value={apartmentFields.address}\n            />\n        </div>\n    </div>\n        <div className=\"current-apartment-container__item\">\n            <div className=\"current-apartment-container__field\">\n                <label className=\"current-apartment-container__field-label\">Статус:</label>\n                <select className=\"custom-select\" onChange={handleIsVipChange} >\n                    <option value=\"1\">VIP</option>\n                    <option value=\"0\">Эконом</option>\n                </select>\n            </div>\n        </div>\n        <div className=\"current-apartment-container__item\">\n            <div className=\"current-apartment-container__field\">\n                <label className=\"current-apartment-container__field-label\" >Количество комнат:</label>\n                <input className=\"curretn-apartment-container__field-input form-control\"\n                    onChange={handleRoomAmountChange}\n                    value={apartmentFields.roomAmount}\n                    type=\"text\" />\n            </div>\n        </div>\n        <div className=\"current-apartment-container__item\">\n            <div className=\"current-apartment-container__field\">\n                <div className=\"custom-file  pointer\" >\n                    <input type=\"file\" className=\"custom-file-input\" id=\"loadapartment-images \" onChange={handleImageLoad} />\n                    <label className=\"custom-file-label\" htmlFor=\"loadapartment-images\">Выберите файл для загрузки фотографии квартиры</label>\n                </div>\n            </div>\n        </div>\n        <div className=\"current-apartment-container__item\">\n            <div className=\"current-apartment-container__field\">\n                <label className=\"current-apartment-container__field-label\">Цена:</label>\n                <input className=\"curretn-apartment-container__field-input form-control\" onChange={handlePriceChange} value={apartmentFields.price} type=\"text\" />\n            </div>\n        </div>\n        <div className=\"current-apartment-container__item\">\n            <div className=\"form-group\">\n                <button className=\"btn btn-success w-100\" onClick={handleAddApartment}>ДОБАВИТЬ</button>\n            </div>\n        </div></>);\n}\n\n\nconst EditServiceInput = ({ apartmentId }) => {\n\n\n    const { data: allServices, error, loading } = useSelector((state) => state.services);\n    const { data: services } = useSelector(state => state.servicesForCurrentApartment);\n    const { value: selectedServiceId, bind } = useField('null');\n    const dispatch = useDispatch();\n    // console.log(allServices);\n    useEffect(() => {\n        dispatch(getAllServiceAction());\n    }, []);\n    useEffect(() => {\n        dispatch(getServicesForApartmentAction(apartmentId));\n    }, [apartmentId]);\n    const handleAddServiceToApartment = () => {\n           if(!(selectedServiceId=='null')){\n                dispatch(addServiceToApartmentAction(apartmentId, selectedServiceId));\n           }\n\n    }\n    const handleDeleteServiceFromApartment = (apartmentId, serviceId) => {\n\n            dispatch(deleteServiceFromApartmentAction(apartmentId, serviceId));\n    }\n    return (<div className=\"edit-apartmentcontainer__item d-flex\">\n        <div className=\"apartment-service-container\">\n            {(services && services.length) ? (\n                services.map((item) => {\n                    return <span className=\"apartment-service-container-item\"\n                        key={item.id}>{item.name}<BsXCircle\n                            onClick={() => { handleDeleteServiceFromApartment(apartmentId, item.id) }}\n                            className=\"apartment-service-icon\" /></span>\n                })\n            ) : null}\n        </div>\n        <div className=\"form-group\">\n            <select {...bind} className=\"form-control\" >\n                <option value=\"null\">выберите услугу</option>\n                {allServices.map((serviceInstance) => {\n                    let curServicesIds = services.map((el) => el.id);\n                    if (curServicesIds.includes(serviceInstance.id)) {\n                        return null;\n                    }\n                    return <option\n                        key={serviceInstance.id}\n\n                        value={serviceInstance.id}\n                    >{serviceInstance.name}</option>\n                })}\n            </select>\n        </div>\n        <div className=\"ml-3\">\n            <button disabled={selectedServiceId=='null'} onClick={handleAddServiceToApartment} className=\"btn btn-success add-subway-btn\">+</button>\n        </div>\n    </div>);\n}\n\nconst EditSubWayInput = ({ apartmentId }) => {\n\n    const dispatch = useDispatch();\n    const { data: subways, error, loading } = useSelector(state => state.subwaysNotIncludedInApartment);\n    const popupInfo = useSelector(state => state.popupInfo);\n    useEffect(() => {\n        dispatch(getAllSubWaysAction(apartmentId));\n    }, [apartmentId]);\n\n    const { value: addedSubway, bind } = useField('null');\n\n    if (popupInfo.subwayAdded) {// если успешно добавлено метро\n        document.location.reload();\n    }\n    const handleAddSubWayToApartment = () => {\n        if (addedSubway == 'null') {\n            return;\n        }\n        // добавляем метро к текущей комнате\n        dispatch(addSubwayForApartmentAction(addedSubway, apartmentId));\n    }\n    return (<div className=\"edit-apartmentcontainer__item d-flex\" >\n        <div className=\"form-group\">\n            <select {...bind} className=\"form-control\" >\n                <option value=\"null\">выберите метро</option>\n                {(subways && subways.length) && (\n                    subways.map((item) => {\n                        return <option key={item.id} value={item.id}>{item.name}</option>\n                    })\n                )}\n            </select>\n        </div>\n        <div className=\"ml-3\">\n            <button onClick={handleAddSubWayToApartment} className=\"btn btn-success add-subway-btn\">+</button>\n        </div>\n    </div>);\n}\n\nexport const ApartmentPage = () => {\n    const dispatch = useDispatch();\n    let { path, url } = useRouteMatch();\n    const { data: apartments, error, loading } = useSelector((state) => state.apartments);\n    // const {} = useSelector(state=>state.subways);\n    const handleAddApartment = (apartmentsField) => {\n        dispatch(createOrderAction(apartmentsField));\n    }\n    useEffect(() => {\n        dispatch(getAllApartmentsAction());\n    }, []);\n    return (\n        <div className=\"apartment-container\">\n            <aside className=\"apartment-list-container\">\n                <div className=\"apartment-list-container__item\">\n                    <ul className=\"list-group apartment-list-container__item-list\">\n                        <li className=\"list-group-item active\">Все квартиры</li>\n                        {(apartments && apartments.length) ? apartments.map((apartment) => {\n                            return (<li className=\"list-group-item\" key={apartment.id}>\n                                <Link to={`${url}/${apartment.id}`}>{apartment.address}</Link></li>)\n                        }) : null}\n                        <li className=\"list-group-item\"><Link to='/apartments'>Создать квартиру</Link></li>\n                    </ul>\n                </div>\n                <div className=\"apartment-list-container__item\">\n                </div>\n            </aside>\n            <section className=\"current-apartment-container \">\n                <Switch>\n                    <Route path={path} exact>\n                        <AddApartment handleAddApartmentListener={handleAddApartment} />\n                    </Route>\n                    <Route path={`${path}/:apartmentId`}>\n\n                        <EditApartment />\n\n                    </Route>\n                </Switch>\n            </section>\n        </div>\n    )\n}","D:\\desctop\\roombot\\front-end\\src\\util\\helpers.js",[],["145","146"],"D:\\desctop\\roombot\\front-end\\src\\routercomponents\\SubWayPage.js",["147","148","149"],"\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {handleDeleteSubWayAction, addSubWayAction,getAllSubWaysAction } from '../reducers/actions'\nimport './subway.css';\n\n\n\n\n\n\n\n\nexport const SubWayPage = () => {\n    const [subWayFields, setSubWayFields] = useState({\n        name: '',\n        geo: ''\n    });\n\n    const dispatch = useDispatch();\n    const { error, success } = useSelector((state) => state.popupInfo);\n    const changeSubNameHandler = (e) => {\n        setSubWayFields((prevState) => {\n            return {\n                ...prevState,\n                name: e.target.value\n            }\n        });\n    }\n    const changeSubWayGeo = (e) => {\n        let fullStr = e.target.value;\n        setSubWayFields((prevState) => {\n            return {\n                ...prevState,\n                geo: fullStr\n            }\n        })\n    }\n    const handleAddSubWay = () => {\n        dispatch(addSubWayAction(subWayFields));\n    }\n    const {data: subways, error:subwayError, loading} = useSelector((state)=>state.subwaysNotIncludedInApartment);\n    const handleDeleteSubWay=(subwayId)=>{\n        dispatch(handleDeleteSubWayAction(subwayId));\n    }\n    useEffect(()=>{\n        dispatch(getAllSubWaysAction())\n    },[]);\n    return (<div className=\"subway-container d-flex\">\n        <aside className=\"all-subways\">\n            <ul className=\"list-group apartment-list-container__item-list\">\n                <li className=\"list-group-item active\" >Список метро</li>\n                {(subways && subways.length) ?subways.map((item)=>{\n                    return (\n                    <li className=\"list-group-item d-flex justify-content-between\" \n                        key={item.id}><span>{item.name}</span><button className=\"btn btn-danger\"\n                        onClick={()=>handleDeleteSubWay(item.id)}>x</button>\n                        </li>)\n\n                }):null}            \n            </ul>\n        </aside>\n        <section className=\"subway-create-metro\" >\n            {success && <div className=\"alert alert-success\">{success.msg}</div>}\n            {error && <div className=\"alert alert-danger\">{error.msg}</div>}\n            <div className=\"form-group \">\n                <input className=\"form-control \" type=\"text\"\n                    value={subWayFields.name}\n                    onChange={changeSubNameHandler}\n                    placeholder=\"Название метро\" />\n                <textarea className=\"form-control  my-3\"\n                    value={subWayFields.geo}\n                    onChange={changeSubWayGeo}\n                    placeholder=\"Введите координаты метро через запятую Например 124,243\" />\n                <button className=\"btn btn-success  my-1\" onClick={handleAddSubWay}>Сохранить метро</button>\n            </div>\n        </section>\n    </div>);\n}","D:\\desctop\\roombot\\front-end\\src\\reducers\\redux-helpers.js",["150","151"],"\nexport function immitateDeletionServiceFromApartment(servicesForCurrentApartment, serviceId) {\n    servicesForCurrentApartment.data = servicesForCurrentApartment.data.filter((item) => {\n        return item.id != serviceId\n    });\n    return servicesForCurrentApartment;\n}\n\nexport function immitateAddServiceToApartment(data,service){\n\tlet copy =  [...data];\n\tlet isServiceAlreadyThere = false;\n            copy.forEach((item)=>{\n                if(item.id ==service.id){\n                        isServiceAlreadyThere = true;\n                }\n\t\t\t});\n\tif(!isServiceAlreadyThere){\n\t\tcopy = [...copy, service];\n    }\n    return copy;\n\n}","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\ServiceForApartmentPage.js",["152","153","154","155"],"\r\nimport { useState,useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAllServiceAction,updateServiceNameAction } from '../reducers/actions'\r\nimport './subway.css';\r\n\r\n\r\nexport const ServiceForApartmentPage = () => {\r\n   \r\n    const dispatch = useDispatch();\r\n    const [servicesName, setServicesName] = useState('');\r\n    const handleServicesNameChange=(e)=>{\r\n        if(e.target.value){\r\n            setServicesName(e.target.value);\r\n        }\r\n    }\r\n    const handleAddService=()=>{\r\n    }\r\n    \r\n    const { data: allServices, error, loading } = useSelector((state) => state.services);\r\n    \r\n    const [curServiceId, setCurServiceId] = useState(null);\r\n    const [chosenServiceName, setChosenServiceName] = useState('');\r\n\r\n    useEffect(()=>{\r\n        dispatch(getAllServiceAction());\r\n    },[]);\r\n\r\n    const handleCurentServiceChoose=(id,name)=>{\r\n        setCurServiceId(id);\r\n        setChosenServiceName(name);\r\n    }\r\n\r\n    const handleBlurChange=()=>{\r\n        if(curServiceId){\r\n            dispatch(updateServiceNameAction(curServiceId,chosenServiceName));\r\n        }\r\n        setCurServiceId(null);\r\n\r\n    }\r\n    return (<div className=\"subway-container d-flex\">\r\n        <aside className=\"all-subways\">\r\n            <ul className=\"list-group apartment-list-container__item-list\">\r\n                <li className=\"list-group-item active\">Список услуг</li>\r\n                {(allServices && allServices.length)?(\r\n                    allServices.map((item)=>{\r\n                        if(curServiceId ==item.id){\r\n                            return (<li\r\n                             key={item.id} className=\"list-group-item active\"><input \r\n                             type=\"text\" \r\n                              onBlur={()=>handleBlurChange()}\r\n                             className=\"form-control\" \r\n                                value={chosenServiceName}\r\n                                onChange={(e)=>setChosenServiceName(e.target.value)}\r\n                             /></li>)\r\n                        }\r\n\r\n                        return <li className=\"list-group-item\"\r\n                            onClick={()=>handleCurentServiceChoose(item.id, item.name)}\r\n                         key={item.id}>{item.name}  </li>\r\n                    })\r\n                    ):null}\r\n            </ul>\r\n        </aside>\r\n        <section className=\"subway-create-metro\" >\r\n            <div className=\"form-group \">\r\n                <input className=\"form-control \" type=\"text\"\r\n                    value={servicesName}\r\n                    onChange={handleServicesNameChange}\r\n                    placeholder=\"Название услуги\" />\r\n                 <button className=\"btn btn-success  my-1\" onClick={handleAddService}>Сохранить услугу</button>\r\n            </div>\r\n        </section>\r\n    </div>);\r\n}",{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":1,"column":10,"nodeType":"162","messageId":"163","endLine":1,"endColumn":18},{"ruleId":"160","severity":1,"message":"164","line":1,"column":20,"nodeType":"162","messageId":"163","endLine":1,"endColumn":29},{"ruleId":"160","severity":1,"message":"165","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":24},{"ruleId":"160","severity":1,"message":"166","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":29},{"ruleId":"160","severity":1,"message":"167","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":30},{"ruleId":"160","severity":1,"message":"168","line":5,"column":10,"nodeType":"162","messageId":"163","endLine":5,"endColumn":25},{"ruleId":"160","severity":1,"message":"169","line":7,"column":10,"nodeType":"162","messageId":"163","endLine":7,"endColumn":21},{"ruleId":"160","severity":1,"message":"170","line":7,"column":23,"nodeType":"162","messageId":"163","endLine":7,"endColumn":34},{"ruleId":"160","severity":1,"message":"171","line":8,"column":10,"nodeType":"162","messageId":"163","endLine":8,"endColumn":25},{"ruleId":"160","severity":1,"message":"172","line":9,"column":27,"nodeType":"162","messageId":"163","endLine":9,"endColumn":33},{"ruleId":"160","severity":1,"message":"173","line":9,"column":35,"nodeType":"162","messageId":"163","endLine":9,"endColumn":39},{"ruleId":"160","severity":1,"message":"174","line":9,"column":56,"nodeType":"162","messageId":"163","endLine":9,"endColumn":65},{"ruleId":"160","severity":1,"message":"175","line":9,"column":67,"nodeType":"162","messageId":"163","endLine":9,"endColumn":80},{"ruleId":"176","severity":1,"message":"177","line":23,"column":41,"nodeType":"178","messageId":"179","endLine":23,"endColumn":43},{"ruleId":"180","severity":1,"message":"181","line":9,"column":9,"nodeType":"182","endLine":13,"endColumn":97},{"ruleId":"176","severity":1,"message":"177","line":56,"column":19,"nodeType":"178","messageId":"179","endLine":56,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":91,"column":21,"nodeType":"178","messageId":"179","endLine":91,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":108,"column":21,"nodeType":"178","messageId":"179","endLine":108,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":150,"column":21,"nodeType":"178","messageId":"179","endLine":150,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":207,"column":21,"nodeType":"178","messageId":"179","endLine":207,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":219,"column":21,"nodeType":"178","messageId":"179","endLine":219,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":233,"column":21,"nodeType":"178","messageId":"179","endLine":233,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":256,"column":21,"nodeType":"178","messageId":"179","endLine":256,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":278,"column":21,"nodeType":"178","messageId":"179","endLine":278,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":314,"column":21,"nodeType":"178","messageId":"179","endLine":314,"endColumn":23},{"ruleId":"176","severity":1,"message":"177","line":325,"column":25,"nodeType":"178","messageId":"179","endLine":325,"endColumn":27},{"ruleId":"176","severity":1,"message":"177","line":383,"column":25,"nodeType":"178","messageId":"179","endLine":383,"endColumn":27},{"ruleId":"183","severity":1,"message":"184","line":4,"column":5,"nodeType":"185","messageId":"186","endLine":5,"endColumn":6},{"ruleId":"187","severity":1,"message":"188","line":71,"column":36,"nodeType":"189","messageId":"190","endLine":71,"endColumn":42},{"ruleId":"183","severity":1,"message":"184","line":156,"column":5,"nodeType":"185","messageId":"186","endLine":157,"endColumn":6},{"ruleId":"191","severity":1,"message":"192","line":6,"column":9,"nodeType":"182","endLine":6,"endColumn":46},{"ruleId":"160","severity":1,"message":"175","line":7,"column":10,"nodeType":"162","messageId":"163","endLine":7,"endColumn":23},{"ruleId":"193","severity":1,"message":"194","line":29,"column":8,"nodeType":"195","endLine":29,"endColumn":31,"suggestions":"196"},{"ruleId":"160","severity":1,"message":"197","line":30,"column":27,"nodeType":"162","messageId":"163","endLine":30,"endColumn":34},{"ruleId":"191","severity":1,"message":"198","line":51,"column":25,"nodeType":"182","endLine":58,"endColumn":50},{"ruleId":"191","severity":1,"message":"198","line":65,"column":25,"nodeType":"182","endLine":68,"endColumn":46},{"ruleId":"160","severity":1,"message":"199","line":2,"column":8,"nodeType":"162","messageId":"163","endLine":2,"endColumn":13},{"ruleId":"160","severity":1,"message":"200","line":3,"column":31,"nodeType":"162","messageId":"163","endLine":3,"endColumn":38},{"ruleId":"160","severity":1,"message":"201","line":3,"column":40,"nodeType":"162","messageId":"163","endLine":3,"endColumn":46},{"ruleId":"160","severity":1,"message":"202","line":12,"column":10,"nodeType":"162","messageId":"163","endLine":12,"endColumn":23},{"ruleId":"160","severity":1,"message":"203","line":23,"column":11,"nodeType":"162","messageId":"163","endLine":23,"endColumn":19},{"ruleId":"193","severity":1,"message":"194","line":45,"column":8,"nodeType":"195","endLine":45,"endColumn":21,"suggestions":"204"},{"ruleId":"160","severity":1,"message":"205","line":47,"column":30,"nodeType":"162","messageId":"163","endLine":47,"endColumn":35},{"ruleId":"160","severity":1,"message":"197","line":47,"column":37,"nodeType":"162","messageId":"163","endLine":47,"endColumn":44},{"ruleId":"180","severity":1,"message":"181","line":147,"column":90,"nodeType":"182","endLine":147,"endColumn":150},{"ruleId":"180","severity":1,"message":"181","line":181,"column":29,"nodeType":"182","endLine":181,"endColumn":90},{"ruleId":"176","severity":1,"message":"177","line":220,"column":19,"nodeType":"178","messageId":"179","endLine":220,"endColumn":21},{"ruleId":"160","severity":1,"message":"205","line":324,"column":32,"nodeType":"162","messageId":"163","endLine":324,"endColumn":37},{"ruleId":"160","severity":1,"message":"197","line":324,"column":39,"nodeType":"162","messageId":"163","endLine":324,"endColumn":46},{"ruleId":"193","severity":1,"message":"194","line":331,"column":8,"nodeType":"195","endLine":331,"endColumn":10,"suggestions":"206"},{"ruleId":"193","severity":1,"message":"194","line":334,"column":8,"nodeType":"195","endLine":334,"endColumn":21,"suggestions":"207"},{"ruleId":"176","severity":1,"message":"177","line":336,"column":34,"nodeType":"178","messageId":"179","endLine":336,"endColumn":36},{"ruleId":"176","severity":1,"message":"177","line":373,"column":48,"nodeType":"178","messageId":"179","endLine":373,"endColumn":50},{"ruleId":"160","severity":1,"message":"205","line":381,"column":28,"nodeType":"162","messageId":"163","endLine":381,"endColumn":33},{"ruleId":"160","severity":1,"message":"197","line":381,"column":35,"nodeType":"162","messageId":"163","endLine":381,"endColumn":42},{"ruleId":"193","severity":1,"message":"194","line":385,"column":8,"nodeType":"195","endLine":385,"endColumn":21,"suggestions":"208"},{"ruleId":"176","severity":1,"message":"177","line":393,"column":25,"nodeType":"178","messageId":"179","endLine":393,"endColumn":27},{"ruleId":"160","severity":1,"message":"205","line":419,"column":31,"nodeType":"162","messageId":"163","endLine":419,"endColumn":36},{"ruleId":"160","severity":1,"message":"197","line":419,"column":38,"nodeType":"162","messageId":"163","endLine":419,"endColumn":45},{"ruleId":"193","severity":1,"message":"194","line":426,"column":8,"nodeType":"195","endLine":426,"endColumn":10,"suggestions":"209"},{"ruleId":"156","replacedBy":"210"},{"ruleId":"158","replacedBy":"211"},{"ruleId":"160","severity":1,"message":"212","line":42,"column":33,"nodeType":"162","messageId":"163","endLine":42,"endColumn":44},{"ruleId":"160","severity":1,"message":"197","line":42,"column":46,"nodeType":"162","messageId":"163","endLine":42,"endColumn":53},{"ruleId":"193","severity":1,"message":"194","line":48,"column":7,"nodeType":"195","endLine":48,"endColumn":9,"suggestions":"213"},{"ruleId":"176","severity":1,"message":"214","line":4,"column":24,"nodeType":"178","messageId":"179","endLine":4,"endColumn":26},{"ruleId":"176","severity":1,"message":"177","line":13,"column":28,"nodeType":"178","messageId":"179","endLine":13,"endColumn":30},{"ruleId":"160","severity":1,"message":"205","line":20,"column":32,"nodeType":"162","messageId":"163","endLine":20,"endColumn":37},{"ruleId":"160","severity":1,"message":"197","line":20,"column":39,"nodeType":"162","messageId":"163","endLine":20,"endColumn":46},{"ruleId":"193","severity":1,"message":"194","line":27,"column":7,"nodeType":"195","endLine":27,"endColumn":9,"suggestions":"215"},{"ruleId":"176","severity":1,"message":"177","line":47,"column":41,"nodeType":"178","messageId":"179","endLine":47,"endColumn":43},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'OrderComponent' is defined but never used.","'NavigationComponent' is defined but never used.","'FilterOrderComponent' is defined but never used.","'AspireComponent' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'getOrdersAction' is defined but never used.","'Router' is defined but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","'useRouteMatch' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","valid-typeof","Invalid typeof comparison value.","Literal","invalidValue","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["218"],"'loading' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'axios' is defined but never used.","'useMemo' is defined but never used.","'useRef' is defined but never used.","'BrowserRouter' is defined but never used.","'dispatch' is assigned a value but never used.",["219"],"'error' is assigned a value but never used.",["220"],["221"],["222"],["223"],["216"],["217"],"'subwayError' is assigned a value but never used.",["224"],"Expected '!==' and instead saw '!='.",["225"],"no-global-assign","no-unsafe-negation",{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"228","fix":"232"},{"desc":"228","fix":"233"},{"desc":"230","fix":"234"},{"desc":"230","fix":"235"},{"desc":"230","fix":"236"},"Update the dependencies array to be: [curPage, dispatch, filterObject]",{"range":"237","text":"238"},"Update the dependencies array to be: [apartmentId, dispatch]",{"range":"239","text":"240"},"Update the dependencies array to be: [dispatch]",{"range":"241","text":"242"},{"range":"243","text":"240"},{"range":"244","text":"240"},{"range":"245","text":"242"},{"range":"246","text":"242"},{"range":"247","text":"242"},[1130,1153],"[curPage, dispatch, filterObject]",[1887,1900],"[apartmentId, dispatch]",[13975,13977],"[dispatch]",[14071,14084],[16228,16241],[17753,17755],[1277,1279],[845,847]]