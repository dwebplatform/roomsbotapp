[{"D:\\desctop\\roombot\\front-end\\src\\index.js":"1","D:\\desctop\\roombot\\front-end\\src\\App.js":"2","D:\\desctop\\roombot\\front-end\\src\\reportWebVitals.js":"3","D:\\desctop\\roombot\\front-end\\src\\components\\OrderComponent.js":"4","D:\\desctop\\roombot\\front-end\\src\\components\\AspireComponent.js":"5","D:\\desctop\\roombot\\front-end\\src\\reducers\\index.js":"6","D:\\desctop\\roombot\\front-end\\src\\reducers\\actions.js":"7","D:\\desctop\\roombot\\front-end\\src\\util\\serviceUtil.js":"8","D:\\desctop\\roombot\\front-end\\src\\components\\FilterOrderComponent.js":"9","D:\\desctop\\roombot\\front-end\\src\\components\\NavigationComponent.js":"10","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\Header.js":"11","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\OrderPage.js":"12","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\ApartmentPage.js":"13","D:\\desctop\\roombot\\front-end\\src\\util\\helpers.js":"14","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\SubWayPage.js":"15","D:\\desctop\\roombot\\front-end\\src\\reducers\\redux-helpers.js":"16","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\ServiceForApartmentPage.js":"17","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\LoginPage.js":"18","D:\\desctop\\roombot\\front-end\\src\\components\\PrivateRoute.js":"19"},{"size":908,"mtime":1612548339178,"results":"20","hashOfConfig":"21"},{"size":1916,"mtime":1613456485946,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":4036,"mtime":1612383683200,"results":"24","hashOfConfig":"21"},{"size":380,"mtime":1612093481754,"results":"25","hashOfConfig":"21"},{"size":16153,"mtime":1612698883378,"results":"26","hashOfConfig":"21"},{"size":17132,"mtime":1613457756890,"results":"27","hashOfConfig":"21"},{"size":7797,"mtime":1612623095497,"results":"28","hashOfConfig":"21"},{"size":1389,"mtime":1612388848823,"results":"29","hashOfConfig":"21"},{"size":1592,"mtime":1612512701493,"results":"30","hashOfConfig":"21"},{"size":280,"mtime":1612094357319,"results":"31","hashOfConfig":"21"},{"size":3528,"mtime":1612514224063,"results":"32","hashOfConfig":"21"},{"size":23546,"mtime":1613459409352,"results":"33","hashOfConfig":"21"},{"size":270,"mtime":1612248747883,"results":"34","hashOfConfig":"21"},{"size":3994,"mtime":1612691348699,"results":"35","hashOfConfig":"21"},{"size":634,"mtime":1612333873794,"results":"36","hashOfConfig":"21"},{"size":3537,"mtime":1612695516644,"results":"37","hashOfConfig":"21"},{"size":2074,"mtime":1612512164618,"results":"38","hashOfConfig":"21"},{"size":361,"mtime":1612514042135,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"18i1ihc",{"filePath":"43","messages":"44","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"D:\\desctop\\roombot\\front-end\\src\\index.js",[],["88","89"],"D:\\desctop\\roombot\\front-end\\src\\App.js",["90","91","92","93","94","95","96","97","98","99","100","101","102"],"D:\\desctop\\roombot\\front-end\\src\\reportWebVitals.js",[],"D:\\desctop\\roombot\\front-end\\src\\components\\OrderComponent.js",["103"],"import { useField } from 'react-hooks-lib';\nimport { useDispatch } from 'react-redux';\nimport { updateStatusAction } from '../reducers/actions';\nimport './order.css';\n\nconst statuses = {\n    0: 'Новый заказ',\n    1: 'Аннулирован',\n    2: 'Совершен'\n};\nexport const OrderComponent = ({ id, className, fullInfo, status }) => {\n    //TODO: найти песню i like being\n    const { client, rooms } = fullInfo;\n    let copiedClient = client || {};\n    //TODO: сделать пагинацию в двух классах Service и Dummy\n    const { value: selectedStatus, bind } = useField(status + '');\n    const dispatch = useDispatch();\n    const handleChangeStatus = () => {\n        // dispatch async ...\n        dispatch(updateStatusAction(selectedStatus, id));\n    }\n    return (<div className={`order-container ${className ? className : ''}`}>\n        <div className={`order ${status == 0 ? 'order__status-new' : ''}`}>\n            <div className=\"order__client\">\n                <h3>Клиент</h3>\n                <div className=\"order__client-info \">\n                    <span className=\"order__client-field\">Имя:{copiedClient.name}</span>\n                    <span className=\"order__client-field\">Фамилия:{copiedClient.secondName}</span>\n                    <span className=\"order__client-field\">Возраст:{copiedClient.age}</span>\n                    <span className=\"order__client-field\">Телефон:{copiedClient.phone}</span>\n                    <span className=\"order__client-field\">mail:{copiedClient.email}</span>\n                </div>\n            </div>\n            <div className=\"order__apartments\">\n                <div className=\"order__apartments-items\">\n                    <h3 className=\"order__apartments-header\"><span>Квартиры</span><span> Статус : {statuses[status]}</span></h3>\n                    {\n                        Array.isArray(rooms) && rooms.map((room, index) => {\n                            return (<div className=\"order__apartments-item\" key={index}>\n                                <span className=\"order__apartment-field\">адрес:{room.address}</span>\n                                <span className=\"order__apartment-field\">кол-во гостей:{room.personsAmount}</span>\n                                <span className=\"order__apartment-field\">Наличие животных: {room.withAnimals ? 'Да' : 'Нет'}</span>\n                                <span className=\"order__apartment-field\">Дети:{room.withChilds ? 'Да' : 'Нет'}</span>\n                                {/* TODO: сделать тут услуги из бд-ки */}\n                                <span className=\"order__apartment-field\">Услуги:</span>\n                                <span className=\"order__apartment-field\">Время заезда:{room.fromDate}</span>\n                                <span className=\"order__apartment-field\">Время выезда:{room.toDate}</span>\n                                <span className=\"order__apartment-field\">Цена за апартаменты:{room.price}</span>\n                                <span className=\"order__apartment-field\">Цена c учетом услуг:{room.totalPrice}</span>\n                            </div>)\n                        })\n                    }\n                    <div className=\"order__status-btn-container\">\n                        <select className=\"order__status-selector\" {...bind}>\n                            {\n                                Object.keys(statuses).map((statusId) => {\n                                    return <option key={statusId} value={statusId}>{statuses[statusId]}</option>\n                                })\n                            }\n                        </select>\n                        <button className=\"order__status-btn\" onClick={handleChangeStatus}>Сменить статус </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>);\n}","D:\\desctop\\roombot\\front-end\\src\\components\\AspireComponent.js",["104"],"export const AspireComponent = () => {\n    return (<div style={{\n        position: 'fixed',\n        top: 0,\n        zIndex: 10,\n        left: '85%',\n\n    }}>\n        <img style={{\n            width: '200px',\n            borderRadius: '50%',\n            height: '200px'\n        }} src=\"https://i.pinimg.com/originals/32/62/b5/3262b55de055134f1a10f886c30c808f.jpg\" />\n    </div>);\n}","D:\\desctop\\roombot\\front-end\\src\\reducers\\index.js",["105","106"],"import { DummyContainer, ServiceUtilContainer } from \"../util/serviceUtil\";\nimport { GET_TOKEN_SUCCESS, GET_TOKEN_ERROR, DELETE_SUBWAY_BY_ID_SUCCESS, DELETE_SUBWAY_BY_ID_ERROR, IMAGE_ADD_TO_APARTMENT_FAIL, REMOVE_SUBWAY_FROM_APARTMENT_ERROR, ADD_SUBWAY_TO_APARTMENT_ERROR, ADD_SERVICE_TO_APARTMENT_ERROR, UPDATE_SERVICE_NAME_ERROR, UPDATE_SERVICE_NAME_SUCCESS, ADD_SERVICE_TO_APARTMENT_SUCCESS, GET_ALL_SERVICES_SUCCESS, GET_ALL_SERVICES_ERROR, REMOVE_SERVICE_FROM_APARTMENT_SUCCESS, REMOVE_SERVICE_FROM_APARTMENT_ERROR, GET_SERVICE_TO_APARTMENT_ERROR, GET_SERVICE_TO_APARTMENT_SUCCESS, DELETE_APARTMENT_BY_ID_SUCCESS, REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS, GET_ORDERS, CREATE_APARTMENT, ADD_SUBWAY_TO_APARTMENT_SUCCESS, CREATE_APARTMENT_ERROR, GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR, GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS, GET_APARTMENTS, IMAGE_ADD_TO_APARTMENT_SUCESS, GET_APARTMENT_BY_ID, DELETE_APARTMENT_IMAGE_SUCCESS, ADD_SUBWAY_ERROR, ADD_SUBWAY_SUCCESS, UPDATE_BASIC_FIELDS_SUCCESS, DELETE_APARTMENT_BY_ID_ERROR, CLEAR_ORDER_EVENT, ADD_NEW_SERVICE_ERROR, ADD_NEW_SERVICE_SUCCESS, LOG_OUT, CHANGE_APARTMENT_ADRESS_FILTER, DELETE_SERVICE_SUCCESS } from \"./actions\";\nimport { immitateDeletionServiceFromApartment, immitateAddServiceToApartment } from \"./redux-helpers\";\n\n\n// тут только одну переменную меняешь\nlet isDummy = false;\nconst initialState = {\n    isAuth: localStorage.getItem('token') ? true : false,\n    apartmentFilter: {\n        adressField: ''\n    },\n    serviceUtilContainer: !isDummy ? new ServiceUtilContainer() : new DummyContainer(),\n    orders: {\n        data: [],\n        error: false,\n        loading: false\n    },\n    adminToken: localStorage.getItem('token') ? localStorage.getItem('token') : '',\n    subwaysNotIncludedInApartment: {\n        data: [],\n        error: false,\n        loading: false\n    },\n    apartment: {\n        data: {},\n        error: false,\n        loading: false\n    },\n    // услуги типа уборка постель и тд\n    services: {\n        data: [],\n        error: false,\n        loading: false\n    },\n\n    apartments: {\n        data: [],\n        error: false,\n        loading: false\n    },\n    servicesForCurrentApartment: {\n        data: [],\n        error: false,\n        loading: false\n    },\n    popupInfo: {\n    }\n};\n\nconst reducer = (state = initialState, action) => {\n    const { type, payload } = action;\n    switch (type) {\n        case LOG_OUT:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                isAuth: false\n            }\n        case GET_TOKEN_SUCCESS:\n            console.log(payload);\n            localStorage.setItem('token', payload.token);\n            return {\n                ...state,\n                isAuth: true,\n                popupInfo: {}\n            };\n        case GET_TOKEN_ERROR:\n            return {\n                ...state,\n                isAuth: false,\n                popupInfo: {\n                    authError: {\n                        msg: 'Доступ был запрещен'\n                    }\n                }\n            }\n        case CHANGE_APARTMENT_ADRESS_FILTER:\n            return {\n                ...state,\n                apartmentFilter: {\n                    ...state.apartmentFilter,\n                    adressField: payload.adressField\n                }\n            }\n        case ADD_NEW_SERVICE_SUCCESS:\n            let addedService = payload.service;\n            return {\n                ...state,\n                services: {\n                    ...state.services,\n                    data: [...state.services.data, addedService]\n                },\n                popupInfo: {\n                    addNewServiceSuccess: {\n                        msg: 'успешно создана новая услуга'\n                    }\n                }\n            }\n        case ADD_NEW_SERVICE_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    addNewServiceError: {\n                        msg: 'не удалось создать новую услугу'\n                    }\n                }\n            }\n        case CLEAR_ORDER_EVENT:\n            return {\n                ...state,\n                popupInfo: {}\n            }\n        case DELETE_SUBWAY_BY_ID_SUCCESS:\n            return {\n                ...state,\n                subwaysNotIncludedInApartment: {\n                    ...state.subwaysNotIncludedInApartment,\n                    data: payload.subways,\n                }\n            }\n        case DELETE_SUBWAY_BY_ID_ERROR:\n            return {\n                ...state,\n            }\n        case UPDATE_SERVICE_NAME_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    error: {\n                        msg: 'Не удалось обновить данные'\n                    }\n                }\n            };\n        case UPDATE_SERVICE_NAME_SUCCESS:\n            let servicesCopy = [...state.services.data];\n            servicesCopy = payload.services;\n            return {\n                ...state,\n                services: {\n                    ...state.services,\n                    data: servicesCopy\n                },\n                popupInfo: {\n                    updateServiceSuccess: true\n                }\n            }\n        case ADD_SERVICE_TO_APARTMENT_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    error: {\n                        msg: 'при добавлении сервиса к текущей квартире произошла ошибка'\n                    }\n                }\n            }\n        case DELETE_SERVICE_SUCCESS:\n            let deletedServiceId = payload.serviceId;\n            let prevServices = [...state.services.data];\n            try {\n                prevServices = prevServices.filter((item) => item.id != deletedServiceId);\n            } catch (e) {\n                prevServices = [];\n            }\n            return {\n                ...state,\n                services: {\n                    ...state.services,\n                    data: prevServices\n                }\n            };\n        case ADD_SERVICE_TO_APARTMENT_SUCCESS:\n            return {\n                ...state,\n                servicesForCurrentApartment: {\n                    ...state.servicesForCurrentApartment,\n                    data: immitateAddServiceToApartment(state.servicesForCurrentApartment.data, payload.service)\n                },\n                popupInfo: {\n                    serviceAddToApartmentSuccess: true\n                }\n            }\n        case GET_ALL_SERVICES_SUCCESS:\n            return {\n                ...state,\n                services: {\n                    data: payload.services,\n                    error: false,\n                    loading: false\n                },\n            }\n        case GET_ALL_SERVICES_ERROR:\n            return {\n                ...state,\n                services: {\n                    data: [],\n                    error: {\n                        msg: 'Не удалось получить ни одной услуги'\n                    },\n                    loading: false\n                }\n            }\n        case REMOVE_SERVICE_FROM_APARTMENT_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    error: {\n                        msg: 'не удалось удалить услугу произошла ошибка на сервере'\n                    }\n                }\n            }\n        case REMOVE_SERVICE_FROM_APARTMENT_SUCCESS:\n            let servicesForCurrentApartmentAfterDelete = immitateDeletionServiceFromApartment(state.servicesForCurrentApartment, payload.serviceId);\n\n            return {\n                ...state,\n                servicesForCurrentApartment: servicesForCurrentApartmentAfterDelete,\n                popupInfo: {\n                    removeApartmentFromApartmentSuccess: true\n                }\n            }\n        case GET_SERVICE_TO_APARTMENT_SUCCESS:\n            return {\n                ...state,\n\n                servicesForCurrentApartment: {\n                    data: payload.services,\n                    error: false,\n                    loading: false\n                }\n            };\n        case GET_SERVICE_TO_APARTMENT_ERROR:\n            return {\n                ...state,\n                servicesForCurrentApartment: {\n                    data: [],\n                    error: {\n                        msg: 'Не было получено услуг для текущей квартиры'\n                    },\n                    loading: false\n                }\n            };\n        case ADD_SUBWAY_SUCCESS:\n\n            return {\n                ...state,\n                popupInfo: {\n                    success: {\n                        msg: payload.msg\n                    }\n                }\n            }\n        case ADD_SUBWAY_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    error: {\n                        msg: payload.msg\n                    }\n                }\n            };\n        case REMOVE_SUBWAY_FROM_APARTMENT_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    error: {\n                        msg: 'при удалении метро из текущей квартиры произошла ошибка'\n                    }\n                }\n            }\n        case REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS:\n            //TODO: remove subway from current apartment\n            let removedSubway = payload.subway;\n            console.log({ removedSubway });\n            // const { subway } = payload;\n            let subwayAfterDeleted = state.apartment.data.Subways ? state.apartment.data.Subways : [];\n            subwayAfterDeleted = subwayAfterDeleted.filter((item) => item.id != removedSubway.id);\n            return {\n                ...state,\n                apartment: {\n                    ...state.apartment,\n                    data: {\n                        ...state.apartment.data,\n                        Subways: subwayAfterDeleted\n                    }\n                },\n                popupInfo: {\n                    removeSubWayFromApartmentSuccess: true\n                }\n            }\n        case DELETE_APARTMENT_BY_ID_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    deletedApartmentSuccess: false\n                }\n            }\n        case DELETE_APARTMENT_BY_ID_SUCCESS:\n            return {\n                ...state,\n                popupInfo: {\n                    deletedApartmentSuccess: true\n                }\n            }\n        case ADD_SUBWAY_TO_APARTMENT_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    subwayAdded: false\n                }\n            }\n        case ADD_SUBWAY_TO_APARTMENT_SUCCESS:\n            const { subway } = payload;\n            let subWaysForCurApartment = state.apartment.data.Subways ? state.apartment.data.Subways : [];\n            subWaysForCurApartment = [...subWaysForCurApartment, subway]; // добавляем в subway для текушей квартиры\n            // и убираем из subwaysNotIncludedInApartment данное метро\n            // state.subwaysNotIncludedInApartment = state.subwaysNotIncludedInApartment.filter((subwayItem) => subwayItem.id != subway.id);\n            let curSubWayInSelector = [...state.subwaysNotIncludedInApartment.data] || [];\n            curSubWayInSelector = curSubWayInSelector.filter((subwayItem) => subwayItem.id !== subway.id);\n\n            return {\n                ...state,\n                subwaysNotIncludedInApartment: {\n                    ...state.subwaysNotIncludedInApartment,\n                    data: curSubWayInSelector\n                },\n                apartment: {\n                    ...state.apartment,\n                    data: {\n                        ...state.apartment.data,\n                        Subways: subWaysForCurApartment\n                    }\n                },\n                popupInfo: {\n                    subwayAdded: true\n                }\n            }\n        case GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR:\n            return {\n                ...state,\n                subwaysNotIncludedInApartment: {\n                    data: [],\n                    error: true,\n                    loading: false\n                }\n            };\n        case GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS:\n            return {\n                ...state,\n                subwaysNotIncludedInApartment: {\n                    data: payload.subways,\n                    error: false,\n                    loading: false\n                }\n            }\n        case IMAGE_ADD_TO_APARTMENT_FAIL:\n            return {\n                ...state,\n                popupInfo: {\n                    successfullyAdded: false\n                }\n            };\n        case IMAGE_ADD_TO_APARTMENT_SUCESS:\n            return {\n                ...state,\n                popupInfo: {\n                    successfullyAdded: true\n                }\n            };\n        case DELETE_APARTMENT_IMAGE_SUCCESS:\n            let imagesInApartment = [];\n            try {\n\n                imagesInApartment = [...state.apartment.data.images];\n                let imageIndex = payload.imageIndex;\n                imagesInApartment.splice(imageIndex, 1);\n            } catch (e) {\n                imagesInApartment = [];\n            };\n            return {\n                ...state,\n                apartment: {\n                    ...state.apartment,\n                    data: {\n                        ...state.apartment.data,\n                        images: imagesInApartment\n                    }\n                },\n                popupInfo: {\n                    apartmentImageDeleted: true\n                }\n            };\n        case GET_APARTMENT_BY_ID:\n            return {\n                ...state,\n                servicesForCurrentApartment: {\n                    ...state.servicesForCurrentApartment,\n                    data: payload.apartment.Services\n                },\n                apartment: {\n                    error: false,\n                    loading: false,\n                    data: payload.apartment\n                }\n            };\n        case GET_APARTMENTS:\n            return {\n                ...state,\n                apartments: {\n                    ...state.apartments,\n                    data: payload.apartments,\n                    error: false,\n                    loading: false,\n                }\n            }\n        case CREATE_APARTMENT_ERROR:\n            return {\n                ...state,\n                error: {\n                    msg: payload.error.msg\n                },\n                popupInfo: {\n                    msg: 'произошла ошибка при попытке создать квартиру'\n                }\n            };\n        case CREATE_APARTMENT:\n            let newApartment = payload.apartment;\n\n            return {\n                ...state,\n                apartments: {\n                    ...state.apartments,\n                    data: [...state.apartments.data, newApartment],\n                },\n                popupInfo: {\n                    createApartmentEvent: {\n                        msg: 'Квартира была создана успешно'\n                    },\n                }\n            }\n        case GET_ORDERS:\n            return {\n                ...state,\n                orders: {\n                    data: payload.data ? payload.data : [],\n                    error: payload.error,\n                    loading: payload.loading\n                }\n            };\n        case UPDATE_BASIC_FIELDS_SUCCESS:\n            return {\n                ...state\n            }\n        default:\n            return state;\n    }\n\n};\n\nexport default reducer;\n","D:\\desctop\\roombot\\front-end\\src\\reducers\\actions.js",["107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"D:\\desctop\\roombot\\front-end\\src\\util\\serviceUtil.js",["122","123","124"],"\nimport axios from 'axios';\nexport class ServiceUtilContainer {\n    constructor() {\n    }\n    config() {\n        const config = {\n            headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n        }\n        return config;\n    }\n\n    async renameSubWayById(subWayId, name) {\n        let response = await axios.post('/api/subway/update', { subWayId, name }, this.config());\n        return response;\n    }\n    async getToken(email, pass) {\n        let response = await axios.post('/api/login', {\n            email,\n            pass\n        });\n        return response;\n    }\n    async deleteService(serviceId) {\n        let response = await axios.post('/api/services/delete', {\n            serviceId\n        }, this.config());\n        return response;\n    }\n    async addService(serviceName) {\n        let response = await axios.post('/api/services/create', {\n            serviceName\n        }, this.config());\n        return response;\n    }\n    async deleteSubWayById(subwayId) {\n        let response = await axios.post(`/api/subway/delete/${subwayId}`, {}, this.config());\n        return response;\n    }\n    async updateServiceName(serviceId, newServiceName) {\n        let response = await axios.post('/api/services/update',\n            {\n                serviceId,\n                newServiceName\n            }, this.config());\n        return response;\n    }\n    async addServiceToApartment(apartmentId, selectedServiceId) {\n\n        let response = await axios.post('/api/services/add-to-apartment', {\n            apartmentId,\n            selectedServiceId\n        }, this.config());\n        return response;\n    }\n\n    async getAllServices() {\n        let response = await axios.get('/api/services/all');\n        return response;\n    }\n    async deleteServiceFromApartmentAction(apartmentId, serviceId) {\n        let response = await axios.post('/api/services/remove-from-apartment', {\n            apartmentId,\n            serviceId\n        }, this.config());\n        return response;\n    }\n    async getServicesForApartment(apartmentId) {\n        let response = await axios.get(`/api/services/all-for-apartment/${apartmentId}`, this.config());\n        return response;\n    }\n    async addSubway(name, geo) {\n        let response = await axios.post('/api/subway/add', { name, geo }, this.config());\n        return response;\n    }\n    async removeSubWayFromApartment(apartmentId, subwayId) {\n        let response = await axios.post(`/api/apartments/${apartmentId}/remove-subway/${subwayId}`, this.config());\n        return response;\n    }\n    /*\n    * \n    route(\"/api/subway/all)\" */\n    async getAllSubWays() {\n        let response = await axios.get('/api/subway/all', this.config());\n        return response;\n    }\n    async deleteApartmentById(apartmentId) {\n        let response = await axios.post(`/api/apartments/delete/${apartmentId}`, this.config());\n        return response;\n    }\n    async addSubwayForApartment(addedSubwayId, apartmentId) {\n        let response = await axios.post('/api/apartments-subway/add-to-apartment', {\n            addedSubwayId, apartmentId\n        }, this.config());\n        return response;\n    }\n    async getAllSubway(apartmentId = null) {\n        let url = '/api/apartments-subway/allsubway-for-apartment/';\n        if (typeof apartmentId !== 'null') {\n            url += apartmentId;\n        }\n        let response = axios.get(url, this.config());\n        return response;\n    }\n    async addNewImageToApartment(apartmentId, imageFilesArray) {\n        let formData = new FormData();\n        imageFilesArray.forEach((file, index) => {\n            formData.append(`apartment_added_image_${index}`, file);\n        });\n        let response = await axios.post(`/api/apartments/add-images/${apartmentId}`, formData, this.config());\n        return response;\n    }\n    async updateApartmentById(apartmentId, fields) {\n        let response = await axios.post(`/api/apartments/update-basic-fields/${apartmentId}`, fields, this.config());\n        return response;\n    }\n    async deleteApartmentImageByIndex(apartmentId, imageIndex) {\n        let response = await axios.post(`/api/apartments/delete-image-by-index`, {\n            apartmentId, imageIndex\n        }, this.config());\n        return response;\n    }\n    async getApartmentById(apartmentId) {\n        let response = await axios.get(`/api/apartments/${apartmentId}`, this.config());\n        return response;\n    }\n    async getAllApartments() {\n        let response = await axios.get('/api/apartments/all-without-pagination', this.config());\n        return response;\n    }\n    async createApartment(data) {\n        // формируем formData\n        let formData = new FormData();\n        let index = 1;\n        data.images.forEach((image) => {\n            formData.append(`image_${index}`, image);\n            index++;\n        });\n        delete data['images'];\n        // create formData \n        for (let key in data) {\n            formData.append(key, data[key]);\n        }\n        let response = await axios.post('/api/apartments/create', formData, this.config());\n        return response;\n    }\n    async updateOrderStatus(selectedStatus, orderId) {\n        try {\n            let response = await fetch('/api/order/update-status', {\n                method: 'POST',\n                credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ selectedStatus, orderId })\n            });\n            let data = response.json();\n            return data;\n        } catch (e) {\n            console.log(e);\n            return {\n                status: 'error'\n            };\n        }\n    }\n    async getOrders(page = 1, { filterObject }) {\n        let finalUrl = '/api/order/all/?limit=5&page=' + page;\n        if (filterObject.fromDate) {\n            finalUrl += '&from=' + filterObject.fromDate\n        }\n        if (filterObject.toDate) {\n            finalUrl += '&to=' + filterObject.toDate;\n        }\n        let { data } = await axios.get(finalUrl, this.config());\n        console.log(filterObject, \"FILTER OBJECT\")\n        return data;\n    }\n}\n\n\nexport class DummyContainer {\n    constructor() {\n    }\n    async updateOrderStatus(selectedStatus, orderId) {\n\n    }\n    async getOrders(page = 1, { filterObject }) {\n        return { \"status\": \"ok\", \"orders\": [{ \"fullInfo\": { \"client\": { \"name\": \"Карл\", \"secondname\": \"Марков\", \"email\": \"dummy@mail.ru\", \"phone\": 88005553535 }, \"rooms\": [{ \"id\": 1, \"address\": \"ул Глупнинская дом 9 кв 104\", \"price\": 3600, \"roomAmount\": 3, \"services\": \"['Уборка','Стирка','Гладка']\", \"withChilds\": true, \"withAnimals\": false }] }, \"id\": 5, \"status\": 0, \"createdAt\": \"2021-01-24T13:39:23.000Z\", \"updatedAt\": \"2021-01-24T13:39:23.000Z\" }, { \"fullInfo\": { \"client\": { \"name\": \"Bob\", \"secondname\": \"Marlie\", \"email\": \"karpov-vb-1996@mail.ru\", \"phone\": 8808555 }, \"rooms\": [{ \"id\": 1, \"address\": \"ул Тушинская дом 3 кв 67\", \"price\": 2800, \"roomAmount\": 3, \"services\": \"['Уборка','Стирка','Гладка']\", \"withChilds\": true, \"withAnimals\": false }] }, \"id\": 11, \"status\": 0, \"createdAt\": \"2021-01-24T14:01:39.000Z\", \"updatedAt\": \"2021-01-24T14:01:39.000Z\" }, { \"fullInfo\": { \"client\": { \"name\": \"Bob\", \"secondname\": \"Marlie\", \"email\": \"karpov-vb-1996@mail.ru\", \"phone\": 8808555 }, \"rooms\": [{ \"id\": 1, \"address\": \"ул Тушинская дом 3 кв 67\", \"price\": 2800, \"personsAmount\": 3, \"roomAmount\": 3, \"services\": \"['Уборка','Стирка','Гладка']\", \"withChilds\": true, \"withAnimals\": false }] }, \"id\": 12, \"status\": 0, \"createdAt\": \"2021-01-24T14:07:52.000Z\", \"updatedAt\": \"2021-01-24T14:07:52.000Z\" }] }\n    }\n}","D:\\desctop\\roombot\\front-end\\src\\components\\FilterOrderComponent.js",[],"D:\\desctop\\roombot\\front-end\\src\\components\\NavigationComponent.js",["125"],"import { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nconst routes = [{ path: '/orders', title: 'Заказы' }, { path: '/apartments', title: 'Квартиры' }, { path: '/subways', title: 'Метро' }, { path: '/services', title: 'Услуги' }];\n\nexport const NavigationComponent = () => {\n    const { isAuth } = useSelector(state => state);\n    return (<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item active\">\n                    <Link className=\"nav-link\" to=\"/\">Главная <span className=\"sr-only\"></span></Link>\n                </li>\n                <li className=\"nav-item\">\n                    {!isAuth && <Link className=\"nav-link\" to=\"/login\" >Войти</Link>}\n                    {isAuth && <Link className=\"nav-link\" to=\"/logout\">Выйти</Link>}\n                </li>\n                {isAuth && routes.map((item) => {\n                    return (<li className=\"nav-item\">\n                        <Link className=\"nav-link\" to={item.path} >{item.title}</Link>\n                    </li>)\n                })}\n            </ul>\n        </div>\n    </nav>)\n}","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\Header.js",[],"D:\\desctop\\roombot\\front-end\\src\\routercomponents\\OrderPage.js",["126","127","128","129"],"\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { OrderComponent } from '../components/OrderComponent';\nimport { FilterOrderComponent } from '../components/FilterOrderComponent';\nimport { getOrdersAction } from '../reducers/actions';\nexport const OrderPage = () => {\n    const dispatch = useDispatch();\n    const [curPage, setPage] = useState(1);\n    localStorage.getItem('from_date');\n    localStorage.getItem('to_date');\n    const [filterObject, setFilterObject] = useState({\n        fromDate: localStorage.getItem('from_date') ? localStorage.getItem('from_date') : new Date().getTime() / 1000,\n        toDate: localStorage.getItem('to_date') ? localStorage.getItem('to_date') : new Date().getTime() / 1000 + 30 * 24 * 3600\n    });\n    const handleFilterChange = ({ fromDate, toDate }) => {\n        let unixFromDate = Date.parse(fromDate) / 1000;\n        let unixToDate = Date.parse(toDate) / 1000;\n        // затем setим filterObject  фильтр в надежде что заработает\n        setFilterObject({\n            fromDate: unixFromDate,\n            toDate: unixToDate\n        });\n    }\n    useEffect(() => {\n        //TODO: check protected\n        // ! получаем  заказы\n        dispatch(getOrdersAction(curPage, { filterObject }));\n    }, [curPage, filterObject]);\n    const { data: orders, loading, error } = useSelector((store) => store.orders);\n\n    function OrderList() {\n        return (orders && orders.map((item, i) => {\n            return <OrderComponent id={item.id} className=\"main-container__item\" fullInfo={item.fullInfo} status={item.status} key={i} />\n        }));\n\n    }\n    return (\n        <section className=\"app\">\n            <div className=\"paddinger\" >\n                {/*//TODO: добавить  в фильтр поле статус !!!  */}\n                <FilterOrderComponent curentFilter={{ ...filterObject }} filterHandleChange={handleFilterChange} />\n            </div>\n            <main className=\"main-container\">\n                {error && <pre>{JSON.stringify(error)}</pre>}\n                <OrderList />\n            </main>\n            <nav className=\"main-navigation\" aria-label=\"Orders navigation \">\n                <ul className=\"pagination\">\n                    <li className=\"page-item\">\n                        <a className=\"page-link my-link\" onClick={(e) => {\n                            e.preventDefault();\n                            if (curPage <= 0) {\n                                return;\n                            } else {\n                                setPage((p) => p - 1);\n                            }\n                        }} aria-label=\"Previous\">\n                            <span aria-hidden=\"true\">&laquo;</span>\n                            <span className=\"sr-only\">Previous</span>\n                        </a>\n                    </li>\n                    <li className=\"page-item \"><a className=\"page-link\" href=\"!#\">...</a></li>\n                    <li className=\"page-item\">\n                        <a className=\"page-link my-link\" onClick={(e) => {\n                            e.preventDefault();\n                            setPage((p) => p + 1);\n                        }} aria-label=\"Next\">\n                            <span aria-hidden=\"true\">&raquo;</span>\n                            <span className=\"sr-only\" >Next</span>\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n        </section>\n    );\n}","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\ApartmentPage.js",["130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154"],"D:\\desctop\\roombot\\front-end\\src\\util\\helpers.js",[],"D:\\desctop\\roombot\\front-end\\src\\routercomponents\\SubWayPage.js",["155","156","157"],"\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { renameSubWayAction, handleDeleteSubWayAction, addSubWayAction, getAllSubWaysAction } from '../reducers/actions'\nimport './subway.css';\n\n\n\n\nexport const SubWayPage = () => {\n    const [subWayFields, setSubWayFields] = useState({\n        name: '',\n        geo: ''\n    });\n\n    const dispatch = useDispatch();\n    const { error, success } = useSelector((state) => state.popupInfo);\n    const changeSubNameHandler = (e) => {\n        setSubWayFields((prevState) => {\n            return {\n                ...prevState,\n                name: e.target.value\n            }\n        });\n    }\n    const changeSubWayGeo = (e) => {\n        let fullStr = e.target.value;\n        setSubWayFields((prevState) => {\n            return {\n                ...prevState,\n                geo: fullStr\n            }\n        })\n    }\n    const handleAddSubWay = () => {\n        dispatch(addSubWayAction(subWayFields));\n    }\n    const { data: subways, error: subwayError, loading } = useSelector((state) => state.subwaysNotIncludedInApartment);\n    const handleDeleteSubWay = (subwayId) => {\n        dispatch(handleDeleteSubWayAction(subwayId));\n    }\n    useEffect(() => {\n        dispatch(getAllSubWaysAction())\n    }, []);\n\n    const handleSubWayNameChange = (subwayId, name) => {\n        dispatch(renameSubWayAction(subwayId, name));\n    };\n    const [curSubWayChangeId, setCurSubChangeId] = useState(null);\n    return (<div className=\"subway-container d-flex\">\n        <aside className=\"all-subways\">\n            <ul className=\"list-group apartment-list-container__item-list\">\n                <li className=\"list-group-item active\" >Список метро</li>\n                {(subways && subways.length) ? subways.map((item) => {\n                    return (\n                        <li className={`list-group-item d-flex justify-content-between ${(item.id === curSubWayChangeId) ? 'active' : ''}`}\n                            key={item.id} onClick={() => {\n                                setCurSubChangeId(item.id);\n                            }}>\n                            {item.id === curSubWayChangeId ? <input type=\"text\"\n                                onBlur={() => {\n                                    setCurSubChangeId(null);\n                                    dispatch(getAllSubWaysAction())\n                                }}\n                                className=\"form-control mr-3\"\n                                onChange={(e) => {\n                                    handleSubWayNameChange(item.id, e.target.value);\n                                }}\n                            /> : <span >{item.name}</span>\n                            }\n\n                            <button className=\"btn btn-danger\"\n                                onClick={(e) => { e.stopPropagation(); handleDeleteSubWay(item.id) }}>x</button>\n                        </li>)\n\n                }) : null}\n            </ul>\n        </aside>\n        <section className=\"subway-create-metro\" >\n            {success && <div className=\"alert alert-success\">{success.msg}</div>}\n            {error && <div className=\"alert alert-danger\">{error.msg}</div>}\n            <div className=\"form-group \">\n                <input className=\"form-control \" type=\"text\"\n                    value={subWayFields.name}\n                    onChange={changeSubNameHandler}\n                    placeholder=\"Название метро\" />\n                <textarea className=\"form-control  my-3\"\n                    value={subWayFields.geo}\n                    onChange={changeSubWayGeo}\n                    placeholder=\"Введите координаты метро через запятую Например 124,243  это будет [lat,long]\" />\n                <button className=\"btn btn-success  my-1\" onClick={handleAddSubWay}>Сохранить метро</button>\n            </div>\n        </section>\n    </div>);\n}","D:\\desctop\\roombot\\front-end\\src\\reducers\\redux-helpers.js",["158","159"],"\nexport function immitateDeletionServiceFromApartment(servicesForCurrentApartment, serviceId) {\n    servicesForCurrentApartment.data = servicesForCurrentApartment.data.filter((item) => {\n        return item.id != serviceId\n    });\n    return servicesForCurrentApartment;\n}\n\nexport function immitateAddServiceToApartment(data,service){\n\tlet copy =  [...data];\n\tlet isServiceAlreadyThere = false;\n            copy.forEach((item)=>{\n                if(item.id ==service.id){\n                        isServiceAlreadyThere = true;\n                }\n\t\t\t});\n\tif(!isServiceAlreadyThere){\n\t\tcopy = [...copy, service];\n    }\n    return copy;\n\n}","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\ServiceForApartmentPage.js",["160","161","162","163"],"import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAllServiceAction, deleteServiceAction, addServiceAction, updateServiceNameAction } from '../reducers/actions'\r\nimport './subway.css';\r\n\r\n\r\nexport const ServiceForApartmentPage = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [servicesName, setServicesName] = useState('');\r\n    const handleServicesNameChange = (e) => {\r\n        setServicesName(e.target.value);\r\n    }\r\n    const handleAddService = (e) => {\r\n        dispatch(addServiceAction(servicesName));\r\n    }\r\n\r\n    const { data: allServices, error, loading } = useSelector((state) => state.services);\r\n\r\n    const [curServiceId, setCurServiceId] = useState(null);\r\n    const [chosenServiceName, setChosenServiceName] = useState('');\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllServiceAction());\r\n    }, []);\r\n\r\n    const handleCurentServiceChoose = (id, name) => {\r\n        setCurServiceId(id);\r\n        setChosenServiceName(name);\r\n    }\r\n    const handleDeleteService = (serviceId) => {\r\n        dispatch(deleteServiceAction(serviceId));\r\n    }\r\n    const handleBlurChange = () => {\r\n        if (curServiceId) {\r\n            dispatch(updateServiceNameAction(curServiceId, chosenServiceName));\r\n        }\r\n        setCurServiceId(null);\r\n    }\r\n    const { addNewServiceSuccess } = useSelector(state => state.popupInfo);\r\n    return (<div className=\"subway-container d-flex\">\r\n        <aside className=\"all-subways\">\r\n            <ul className=\"list-group apartment-list-container__item-list\">\r\n                <li className=\"list-group-item active\">Список услуг</li>\r\n                {(allServices && allServices.length) ? (\r\n                    allServices.map((item) => {\r\n                        if (curServiceId == item.id) {\r\n                            return (<li\r\n                                key={item.id} className=\"list-group-item active\"><input\r\n                                    type=\"text\"\r\n                                    onBlur={handleBlurChange}\r\n                                    className=\"form-control\"\r\n                                    value={chosenServiceName}\r\n                                    onChange={(e) => setChosenServiceName(e.target.value)}\r\n                                /></li>)\r\n                        }\r\n                        return <li className=\"list-group-item d-flex justify-content-between\"\r\n                            onClick={() => handleCurentServiceChoose(item.id, item.name)}\r\n                            key={item.id}><span>{item.name}</span><button className=\"btn btn-danger\" onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                handleDeleteService(item.id);\r\n                            }}>x</button></li>\r\n                    })\r\n                ) : null}\r\n            </ul>\r\n        </aside>\r\n        <section className=\"subway-create-metro\" >\r\n            {addNewServiceSuccess && (<div className=\"alert alert-success\">{addNewServiceSuccess.msg}</div>)}\r\n            <div className=\"form-group \">\r\n                <input className=\"form-control \" type=\"text\"\r\n                    value={servicesName}\r\n                    onChange={handleServicesNameChange}\r\n                    placeholder=\"Название услуги\" />\r\n                <button className=\"btn btn-success  my-1\" onClick={handleAddService}>Сохранить услугу</button>\r\n            </div>\r\n        </section>\r\n    </div>);\r\n}","D:\\desctop\\roombot\\front-end\\src\\routercomponents\\LoginPage.js",[],"D:\\desctop\\roombot\\front-end\\src\\components\\PrivateRoute.js",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":1,"column":10,"nodeType":"170","messageId":"171","endLine":1,"endColumn":18},{"ruleId":"168","severity":1,"message":"172","line":2,"column":10,"nodeType":"170","messageId":"171","endLine":2,"endColumn":24},{"ruleId":"168","severity":1,"message":"173","line":3,"column":10,"nodeType":"170","messageId":"171","endLine":3,"endColumn":29},{"ruleId":"168","severity":1,"message":"174","line":4,"column":10,"nodeType":"170","messageId":"171","endLine":4,"endColumn":30},{"ruleId":"168","severity":1,"message":"175","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":25},{"ruleId":"168","severity":1,"message":"176","line":7,"column":23,"nodeType":"170","messageId":"171","endLine":7,"endColumn":34},{"ruleId":"168","severity":1,"message":"177","line":8,"column":10,"nodeType":"170","messageId":"171","endLine":8,"endColumn":25},{"ruleId":"168","severity":1,"message":"178","line":9,"column":27,"nodeType":"170","messageId":"171","endLine":9,"endColumn":33},{"ruleId":"168","severity":1,"message":"179","line":9,"column":35,"nodeType":"170","messageId":"171","endLine":9,"endColumn":39},{"ruleId":"168","severity":1,"message":"180","line":9,"column":66,"nodeType":"170","messageId":"171","endLine":9,"endColumn":75},{"ruleId":"168","severity":1,"message":"181","line":9,"column":77,"nodeType":"170","messageId":"171","endLine":9,"endColumn":90},{"ruleId":"182","severity":1,"message":"183","line":22,"column":6,"nodeType":"184","endLine":22,"endColumn":8,"suggestions":"185"},{"ruleId":"168","severity":1,"message":"186","line":27,"column":12,"nodeType":"170","messageId":"171","endLine":27,"endColumn":18},{"ruleId":"187","severity":1,"message":"188","line":23,"column":41,"nodeType":"189","messageId":"190","endLine":23,"endColumn":43},{"ruleId":"191","severity":1,"message":"192","line":9,"column":9,"nodeType":"193","endLine":13,"endColumn":97},{"ruleId":"187","severity":1,"message":"194","line":161,"column":70,"nodeType":"189","messageId":"190","endLine":161,"endColumn":72},{"ruleId":"187","severity":1,"message":"194","line":277,"column":78,"nodeType":"189","messageId":"190","endLine":277,"endColumn":80},{"ruleId":"187","severity":1,"message":"188","line":74,"column":21,"nodeType":"189","messageId":"190","endLine":74,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":92,"column":21,"nodeType":"189","messageId":"190","endLine":92,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":109,"column":21,"nodeType":"189","messageId":"190","endLine":109,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":127,"column":21,"nodeType":"189","messageId":"190","endLine":127,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":146,"column":21,"nodeType":"189","messageId":"190","endLine":146,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":189,"column":21,"nodeType":"189","messageId":"190","endLine":189,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":206,"column":21,"nodeType":"189","messageId":"190","endLine":206,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":247,"column":21,"nodeType":"189","messageId":"190","endLine":247,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":308,"column":21,"nodeType":"189","messageId":"190","endLine":308,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":321,"column":21,"nodeType":"189","messageId":"190","endLine":321,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":337,"column":21,"nodeType":"189","messageId":"190","endLine":337,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":360,"column":21,"nodeType":"189","messageId":"190","endLine":360,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":382,"column":21,"nodeType":"189","messageId":"190","endLine":382,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":451,"column":25,"nodeType":"189","messageId":"190","endLine":451,"endColumn":27},{"ruleId":"187","severity":1,"message":"188","line":511,"column":25,"nodeType":"189","messageId":"190","endLine":511,"endColumn":27},{"ruleId":"195","severity":1,"message":"196","line":4,"column":5,"nodeType":"197","messageId":"198","endLine":5,"endColumn":6},{"ruleId":"199","severity":1,"message":"200","line":99,"column":36,"nodeType":"201","messageId":"202","endLine":99,"endColumn":42},{"ruleId":"195","severity":1,"message":"196","line":182,"column":5,"nodeType":"197","messageId":"198","endLine":183,"endColumn":6},{"ruleId":"203","severity":1,"message":"204","line":9,"column":9,"nodeType":"193","endLine":9,"endColumn":46},{"ruleId":"182","severity":1,"message":"183","line":29,"column":8,"nodeType":"184","endLine":29,"endColumn":31,"suggestions":"205"},{"ruleId":"168","severity":1,"message":"206","line":30,"column":27,"nodeType":"170","messageId":"171","endLine":30,"endColumn":34},{"ruleId":"203","severity":1,"message":"207","line":51,"column":25,"nodeType":"193","endLine":58,"endColumn":50},{"ruleId":"203","severity":1,"message":"207","line":65,"column":25,"nodeType":"193","endLine":68,"endColumn":46},{"ruleId":"168","severity":1,"message":"208","line":2,"column":8,"nodeType":"170","messageId":"171","endLine":2,"endColumn":13},{"ruleId":"168","severity":1,"message":"209","line":3,"column":31,"nodeType":"170","messageId":"171","endLine":3,"endColumn":38},{"ruleId":"168","severity":1,"message":"210","line":3,"column":40,"nodeType":"170","messageId":"171","endLine":3,"endColumn":46},{"ruleId":"168","severity":1,"message":"211","line":11,"column":166,"nodeType":"170","messageId":"171","endLine":11,"endColumn":195},{"ruleId":"168","severity":1,"message":"212","line":12,"column":10,"nodeType":"170","messageId":"171","endLine":12,"endColumn":23},{"ruleId":"182","severity":1,"message":"183","line":47,"column":8,"nodeType":"184","endLine":47,"endColumn":21,"suggestions":"213"},{"ruleId":"168","severity":1,"message":"214","line":49,"column":30,"nodeType":"170","messageId":"171","endLine":49,"endColumn":35},{"ruleId":"168","severity":1,"message":"206","line":49,"column":37,"nodeType":"170","messageId":"171","endLine":49,"endColumn":44},{"ruleId":"191","severity":1,"message":"192","line":183,"column":90,"nodeType":"193","endLine":183,"endColumn":150},{"ruleId":"191","severity":1,"message":"192","line":217,"column":29,"nodeType":"193","endLine":217,"endColumn":90},{"ruleId":"187","severity":1,"message":"188","line":266,"column":19,"nodeType":"189","messageId":"190","endLine":266,"endColumn":21},{"ruleId":"168","severity":1,"message":"215","line":317,"column":11,"nodeType":"170","messageId":"171","endLine":317,"endColumn":30},{"ruleId":"182","severity":1,"message":"216","line":325,"column":8,"nodeType":"184","endLine":325,"endColumn":10,"suggestions":"217"},{"ruleId":"168","severity":1,"message":"214","line":389,"column":32,"nodeType":"170","messageId":"171","endLine":389,"endColumn":37},{"ruleId":"168","severity":1,"message":"206","line":389,"column":39,"nodeType":"170","messageId":"171","endLine":389,"endColumn":46},{"ruleId":"182","severity":1,"message":"183","line":395,"column":8,"nodeType":"184","endLine":395,"endColumn":10,"suggestions":"218"},{"ruleId":"187","severity":1,"message":"188","line":400,"column":33,"nodeType":"189","messageId":"190","endLine":400,"endColumn":35},{"ruleId":"187","severity":1,"message":"188","line":434,"column":49,"nodeType":"189","messageId":"190","endLine":434,"endColumn":51},{"ruleId":"168","severity":1,"message":"214","line":441,"column":28,"nodeType":"170","messageId":"171","endLine":441,"endColumn":33},{"ruleId":"168","severity":1,"message":"206","line":441,"column":35,"nodeType":"170","messageId":"171","endLine":441,"endColumn":42},{"ruleId":"187","severity":1,"message":"188","line":449,"column":25,"nodeType":"189","messageId":"190","endLine":449,"endColumn":27},{"ruleId":"182","severity":1,"message":"183","line":457,"column":8,"nodeType":"184","endLine":457,"endColumn":21,"suggestions":"219"},{"ruleId":"168","severity":1,"message":"214","line":479,"column":31,"nodeType":"170","messageId":"171","endLine":479,"endColumn":36},{"ruleId":"168","severity":1,"message":"206","line":479,"column":38,"nodeType":"170","messageId":"171","endLine":479,"endColumn":45},{"ruleId":"182","severity":1,"message":"183","line":485,"column":8,"nodeType":"184","endLine":485,"endColumn":10,"suggestions":"220"},{"ruleId":"168","severity":1,"message":"221","line":38,"column":35,"nodeType":"170","messageId":"171","endLine":38,"endColumn":46},{"ruleId":"168","severity":1,"message":"206","line":38,"column":48,"nodeType":"170","messageId":"171","endLine":38,"endColumn":55},{"ruleId":"182","severity":1,"message":"183","line":44,"column":8,"nodeType":"184","endLine":44,"endColumn":10,"suggestions":"222"},{"ruleId":"187","severity":1,"message":"194","line":4,"column":24,"nodeType":"189","messageId":"190","endLine":4,"endColumn":26},{"ruleId":"187","severity":1,"message":"188","line":13,"column":28,"nodeType":"189","messageId":"190","endLine":13,"endColumn":30},{"ruleId":"168","severity":1,"message":"214","line":18,"column":32,"nodeType":"170","messageId":"171","endLine":18,"endColumn":37},{"ruleId":"168","severity":1,"message":"206","line":18,"column":39,"nodeType":"170","messageId":"171","endLine":18,"endColumn":46},{"ruleId":"182","severity":1,"message":"183","line":25,"column":8,"nodeType":"184","endLine":25,"endColumn":10,"suggestions":"223"},{"ruleId":"187","severity":1,"message":"188","line":47,"column":42,"nodeType":"189","messageId":"190","endLine":47,"endColumn":44},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'OrderComponent' is defined but never used.","'NavigationComponent' is defined but never used.","'FilterOrderComponent' is defined but never used.","'AspireComponent' is defined but never used.","'useSelector' is defined but never used.","'getOrdersAction' is defined but never used.","'Router' is defined but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","'useRouteMatch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["226"],"'logOut' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '!==' and instead saw '!='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","valid-typeof","Invalid typeof comparison value.","Literal","invalidValue","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["227"],"'loading' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'axios' is defined but never used.","'useMemo' is defined but never used.","'useRef' is defined but never used.","'getServicesForApartmentAction' is defined but never used.","'BrowserRouter' is defined but never used.",["228"],"'error' is assigned a value but never used.","'handleYandexUrlLoad' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'createApartmentEvent' and 'dispatch'. Either include them or remove the dependency array.",["229"],["230"],["231"],["232"],"'subwayError' is assigned a value but never used.",["233"],["234"],"no-global-assign","no-unsafe-negation",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"235","fix":"243"},{"desc":"239","fix":"244"},{"desc":"235","fix":"245"},{"desc":"235","fix":"246"},{"desc":"235","fix":"247"},"Update the dependencies array to be: [dispatch]",{"range":"248","text":"249"},"Update the dependencies array to be: [curPage, dispatch, filterObject]",{"range":"250","text":"251"},"Update the dependencies array to be: [apartmentId, dispatch]",{"range":"252","text":"253"},"Update the dependencies array to be: [createApartmentEvent, dispatch]",{"range":"254","text":"255"},{"range":"256","text":"249"},{"range":"257","text":"253"},{"range":"258","text":"249"},{"range":"259","text":"249"},{"range":"260","text":"249"},[1129,1131],"[dispatch]",[1295,1318],"[curPage, dispatch, filterObject]",[2080,2093],"[apartmentId, dispatch]",[13464,13466],"[createApartmentEvent, dispatch]",[17065,17067],[19727,19740],[20799,20801],[1307,1309],[892,894]]