{"version":3,"sources":["reducers/actions.js","components/OrderComponent.js","components/NavigationComponent.js","components/FilterOrderComponent.js","components/AspireComponent.js","routercomponents/Header.js","routercomponents/OrderPage.js","routercomponents/ApartmentPage.js","util/helpers.js","routercomponents/LoginPage.js","routercomponents/SubWayPage.js","routercomponents/ServiceForApartmentPage.js","components/PrivateRoute.js","App.js","reportWebVitals.js","util/serviceUtil.js","reducers/redux-helpers.js","reducers/index.js","index.js"],"names":["CHANGE_APARTMENT_ADRESS_FILTER","GET_ORDERS","GET_APARTMENTS","GET_APARTMENT_BY_ID","GENERAL_ERROR","CREATE_APARTMENT","CREATE_APARTMENT_ERROR","GET_ALL_APARTMENT_ERROR","IMAGE_ADD_TO_APARTMENT_SUCESS","IMAGE_ADD_TO_APARTMENT_FAIL","DELETE_APARTMENT_IMAGE_SUCCESS","GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS","GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR","ADD_SUBWAY_TO_APARTMENT_SUCCESS","ADD_SUBWAY_TO_APARTMENT_ERROR","DELETE_APARTMENT_BY_ID_SUCCESS","DELETE_APARTMENT_BY_ID_ERROR","REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS","REMOVE_SUBWAY_FROM_APARTMENT_ERROR","ADD_SUBWAY_SUCCESS","ADD_SUBWAY_ERROR","GET_SERVICE_TO_APARTMENT_SUCCESS","GET_SERVICE_TO_APARTMENT_ERROR","REMOVE_SERVICE_FROM_APARTMENT_SUCCESS","REMOVE_SERVICE_FROM_APARTMENT_ERROR","GET_ALL_SERVICES_SUCCESS","GET_ALL_SERVICES_ERROR","ADD_SERVICE_TO_APARTMENT_SUCCESS","ADD_SERVICE_TO_APARTMENT_ERROR","UPDATE_SERVICE_NAME_SUCCESS","UPDATE_SERVICE_NAME_ERROR","UPDATE_BASIC_FIELDS_SUCCESS","DELETE_SUBWAY_BY_ID_SUCCESS","DELETE_SUBWAY_BY_ID_ERROR","CLEAR_ORDER_EVENT","ADD_NEW_SERVICE_SUCCESS","ADD_NEW_SERVICE_ERROR","DELETE_SERVICE_SUCCESS","GET_TOKEN_SUCCESS","GET_TOKEN_ERROR","LOG_OUT","getAllServiceAction","dispatch","getState","a","serviceUtilContainer","getAllServices","data","status","type","payload","services","getAllSubWaysAction","apartmentId","getAllSubway","subways","error","loading","statuses","0","1","2","OrderComponent","id","className","fullInfo","client","rooms","copiedClient","useField","selectedStatus","value","bind","useDispatch","name","secondName","age","phone","email","Array","isArray","map","room","index","address","personsAmount","withAnimals","withChilds","fromDate","toDate","price","totalPrice","Object","keys","statusId","onClick","orderId","updateOrderStatus","updateStatusAction","routes","path","title","NavigationComponent","isAuth","useSelector","state","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","item","FilterOrderComponent","curentFilter","filterHandleChange","initialFromDate","moment","unix","format","initialToDate","useState","setFromDate","setToDate","onChange","e","target","AspireComponent","style","position","top","zIndex","left","width","borderRadius","height","src","Header","OrderPage","curPage","setPage","localStorage","getItem","Date","getTime","filterObject","setFilterObject","useEffect","page","console","log","setItem","getOrders","orders","msg","getOrdersAction","store","OrderList","i","unixFromDate","parse","unixToDate","JSON","stringify","preventDefault","p","aria-hidden","EditApartment","useParams","getApartmentById","apartment","getApartmentByIdAction","popupInfo","apartmentImageDeleted","removeSubWayFromApartmentSuccess","successfullyAdded","deletedApartmentSuccess","roomAmount","isVip","maxperson","editFields","setEditFields","obj","props","isPropsIn","forEach","objectHasProps","Subways","useApartmentUpdate","handleBasicFieldsChange","prevState","addedImages","setAddedImages","preloadedUrls","setPreloadedUrls","handleDeleteImage","imageIndex","deleteApartmentImageByIndex","deleteApartmentImageByIndexAction","handleDeleteSubWayFromApartment","subwayId","removeSubWayFromApartment","subway","removeSubWayFromApartmentAction","htmlFor","files","length","URL","createObjectURL","imageFileArray","addNewImageToApartment","addNewImageToApartmentAction","fontWeight","fontSize","subWayItem","images","apartmentHasImage","image","fields","updateApartmentById","updateBasicApartmentFieldsAction","deleteApartmentById","deleteApartmentByIdAction","AddApartment","handleAddApartmentListener","apartmentFields","setApartmentFields","handleImageLoad","file","concat","handleAddApartment","copyApatrmentsFields","createApartmentEvent","GeneralError","EditServiceInput","allServices","servicesForCurrentApartment","selectedServiceId","handleDeleteServiceFromApartment","serviceId","deleteServiceFromApartmentAction","serviceInstance","el","includes","disabled","addServiceToApartment","service","addServiceToApartmentAction","EditSubWayInput","subwaysNotIncludedInApartment","addedSubway","subwayAdded","addedSubwayId","addSubwayForApartment","addSubwayForApartmentAction","ApartmentPage","useRouteMatch","url","apartments","getAllApartments","isApartmentFilterShown","setShowApartmentFilter","adressField","apartmentFilter","ApartmentList","filter","onBlur","adressValue","exact","apartmentsField","formDataObject","createApartment","LoginPage","password","userData","setUserData","authError","prevData","placeholder","pass","getToken","token","SubWayPage","geo","subWayFields","setSubWayFields","success","handleDeleteSubWay","deleteSubWayById","handleDeleteSubWayAction","handleSubWayNameChange","subWayId","renameSubWayById","renameSubWayAction","curSubWayChangeId","setCurSubChangeId","stopPropagation","fullStr","addSubway","addSubWayAction","ServiceForApartmentPage","servicesName","setServicesName","curServiceId","setCurServiceId","chosenServiceName","setChosenServiceName","handleDeleteService","deleteService","deleteServiceAction","handleBlurChange","newServiceName","updateServiceName","addNewServiceSuccess","serviceName","addService","PrivateRoute","Component","children","rest","LogOutPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ServiceUtilContainer","config","headers","Authorization","axios","post","this","response","get","imageFilesArray","formData","FormData","append","key","fetch","method","credentials","body","json","finalUrl","immitateDeletionServiceFromApartment","immitateAddServiceToApartment","copy","isServiceAlreadyThere","initialState","adminToken","reducer","action","removeItem","addedService","addNewServiceError","servicesCopy","updateServiceSuccess","deletedServiceId","prevServices","serviceAddToApartmentSuccess","servicesForCurrentApartmentAfterDelete","removeApartmentFromApartmentSuccess","removedSubway","subwayAfterDeleted","subWaysForCurApartment","curSubWayInSelector","subwayItem","imagesInApartment","splice","Services","newApartment","createStore","applyMiddleware","logger","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42740dfe.chunk.js","sourcesContent":["export const CHANGE_APARTMENT_ADRESS_FILTER = \"CHANGE_APARTMENT_ADRESS_FILTER\";\nexport const GET_ORDERS = \"GET_ORDERS\";\nexport const GET_APARTMENTS = \"GET_APARTMENTS\";\nexport const GET_APARTMENT_BY_ID = \"GET_APARTMENT_BY_ID\";\nexport const GET_APARTMENT_BY_ID_ERROR = \"GET_APARTMENT_BY_ID_ERROR\";\nexport const GENERAL_ERROR = \"GENERAL_ERROR\";\nexport const UPDATE_ORDER_STATUS = \"UPDATE_ORDER_STATUS\";\nexport const CREATE_APARTMENT = \"CREATE_APARTMENT\";\nexport const CREATE_APARTMENT_ERROR = \"CREATE_APARTMENT_ERROR\";\nexport const GET_ALL_APARTMENT_ERROR = \"GET_ALL_APARTMENT_ERROR\";\nexport const CHANGE_SUBWAY_NAME = \"CHANGE_SUBWAY_NAME\";\nexport const CHANGE_SUBWAY_NAME_ERROR = \"CHANGE_SUBWAY_NAME_ERROR\";\n\nexport const IMAGE_ADD_TO_APARTMENT_SUCESS = \"IMAGE_ADD_TO_APARTMENT_SUCESS\";\nexport const IMAGE_ADD_TO_APARTMENT_FAIL = \"IMAGE_ADD_TO_APARTMENT_FAIL\";\n\nexport const DELETE_APARTMENT_IMAGE_SUCCESS = \"DELETE_APARTMENT_IMAGE_SUCCESS\";\nexport const DELETE_APARTMENT_IMAGE_ERROR = \"DELETE_APARTMENT_IMAGE_ERROR\";\nexport const GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS = \"GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS\";\nexport const GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR = \"GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR\";\n\nexport const ADD_SUBWAY_TO_APARTMENT_SUCCESS = \"ADD_SUBWAY_TO_APARTMENT_SUCCESS\";\nexport const ADD_SUBWAY_TO_APARTMENT_ERROR = \"ADD_SUBWAY_TO_APARTMENT_ERROR\";\n\nexport const DELETE_APARTMENT_BY_ID_SUCCESS = \"DELETE_APARTMENT_BY_ID_SUCCESS\";\nexport const DELETE_APARTMENT_BY_ID_ERROR = \"DELETE_APARTMENT_BY_ID_ERROR\";\n\nexport const REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS = \"REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS\";\nexport const REMOVE_SUBWAY_FROM_APARTMENT_ERROR = \"REMOVE_SUBWAY_FROM_APARTMENT_ERROR\";\n\nexport const ADD_SUBWAY_SUCCESS = \"ADD_SUBWAY_SUCCESS\";\nexport const ADD_SUBWAY_ERROR = \"ADD_SUBWAY_ERROR\";\n\nexport const GET_SERVICE_TO_APARTMENT_SUCCESS = \"GET_SERVICE_TO_APARTMENT_SUCCESS\";\nexport const GET_SERVICE_TO_APARTMENT_ERROR = \"GET_SERVICE_TO_APARTMENT_ERROR\";\n\nexport const REMOVE_SERVICE_FROM_APARTMENT_SUCCESS = \"REMOVE_SERVICE_FROM_APARTMENT_SUCCESS\";\nexport const REMOVE_SERVICE_FROM_APARTMENT_ERROR = \"REMOVE_SERVICE_FROM_APARTMENT_ERROR\";\n\nexport const GET_ALL_SERVICES_SUCCESS = \"GET_ALL_SERVICES_SUCCESS\";\nexport const GET_ALL_SERVICES_ERROR = \"GET_ALL_SERVICES_ERROR\";\n\nexport const ADD_SERVICE_TO_APARTMENT_SUCCESS = \"ADD_SERVICE_TO_APARTMENT_SUCCESS\";\nexport const ADD_SERVICE_TO_APARTMENT_ERROR = \"ADD_SERVICE_TO_APARTMENT_ERROR\";\n\nexport const UPDATE_SERVICE_NAME_SUCCESS = \"UPDATE_SERVICE_NAME_SUCCESS\";\nexport const UPDATE_SERVICE_NAME_ERROR = \"UPDATE_SERVICE_NAME_ERROR\";\n\nexport const UPDATE_BASIC_FIELDS_SUCCESS = \"UPDATE_BASIC_FIELDS_SUCCESS\";\n\nexport const DELETE_SUBWAY_BY_ID_SUCCESS = \"DELETE_SUBWAY_BY_ID_SUCCESS\";\nexport const DELETE_SUBWAY_BY_ID_ERROR = \"DELETE_SUBWAY_BY_ID_ERROR\";\n\nexport const CLEAR_ORDER_EVENT = \"CLEAR_ORDER_EVENT\";\n\nexport const ADD_NEW_SERVICE_SUCCESS = \"ADD_NEW_SERVICE_SUCCESS\";\nexport const ADD_NEW_SERVICE_ERROR = \"ADD_NEW_SERVICE_ERROR\";\n\nexport const DELETE_SERVICE_SUCCESS = \"DELETE_SERVICE_SUCCESS\";\nexport const DELETE_SERVICE_ERROR = \"DELETE_SERVICE_ERROR\";\n\n\nexport const GET_TOKEN_SUCCESS = \"GET_TOKEN_SUCCESS\";\nexport const GET_TOKEN_ERROR = \"GET_TOKEN_ERROR\";\n\nexport const LOG_OUT = \"LOG_OUT\";\nexport const logoutAction = () => {\n    return {\n        type: LOG_OUT\n    }\n};\nexport const submitUserAction = (email, pass) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.getToken(email, pass);\n    if (data.status == 'ok') {\n        dispatch({\n            type: GET_TOKEN_SUCCESS,\n            payload: {\n                token: data.token\n            }\n        });\n    } else {\n        dispatch({\n            type: GET_TOKEN_ERROR,\n            payload: {\n                msg: 'не удалось войти'\n            }\n        });\n    }\n}\nexport const deleteServiceAction = (serviceId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.deleteService(serviceId);\n    if (data.status == 'ok') {\n        dispatch({\n            type: DELETE_SERVICE_SUCCESS,\n            payload: {\n                serviceId\n            }\n        })\n    } else {\n        dispatch({\n            type: DELETE_SERVICE_ERROR\n        });\n\n    }\n};\nexport const addServiceAction = (serviceName) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.addService(serviceName);\n\n    if (data.status == \"ok\") {\n        dispatch({\n            type: ADD_NEW_SERVICE_SUCCESS,\n            payload: {\n                service: data.service\n            }\n        });\n    } else {\n        dispatch({\n            type: ADD_NEW_SERVICE_ERROR,\n\n        });\n    }\n}\n\nexport const renameSubWayAction = (subWayId, name) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.renameSubWayById(subWayId, name);\n    console.log(data);\n    if (data.status == 'ok') {\n        dispatch({\n            type: CHANGE_SUBWAY_NAME,\n            payload: {\n                name: name\n            },\n        })\n    } else {\n        dispatch({\n            type: CHANGE_SUBWAY_NAME_ERROR,\n            payload: {\n                name: name\n            },\n        })\n    }\n}\nexport const handleDeleteSubWayAction = (subwayId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.deleteSubWayById(subwayId);\n    console.log(data)\n    if (data.status == 'ok') {\n        dispatch({\n\n            type: DELETE_SUBWAY_BY_ID_SUCCESS,\n            payload: {\n                subways: data.subways\n            }\n        });\n    } else {\n        dispatch({\n            type: DELETE_SUBWAY_BY_ID_ERROR\n        });\n\n    }\n\n}\nexport const updateServiceNameAction = (serviceId, newServiceName) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.updateServiceName(serviceId, newServiceName);\n\n    if (data.status === 'ok') {\n        dispatch({\n            payload: {\n                services: data.services,\n            },\n            type: UPDATE_SERVICE_NAME_SUCCESS\n        });\n    } else {\n        dispatch({\n            type: UPDATE_SERVICE_NAME_ERROR\n\n        })\n    }\n}\nexport const adressFilterChangeAction = (adressValue) => (dispatch) => {\n    dispatch({\n        type: CHANGE_APARTMENT_ADRESS_FILTER, payload: {\n            adressField: adressValue\n        }\n    });\n}\n\nexport const addServiceToApartmentAction = (apartmentId, selectedServiceId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.addServiceToApartment(apartmentId, selectedServiceId);\n    if (data.status == 'ok') {\n        dispatch({\n            type: ADD_SERVICE_TO_APARTMENT_SUCCESS,\n            payload: {\n                service: data.service,\n            }\n        })\n    } else {\n        dispatch({\n            type: ADD_SERVICE_TO_APARTMENT_ERROR\n        });\n    }\n\n\n}\nexport const getAllServiceAction = () => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.getAllServices();\n    if (data.status == 'ok') {\n        dispatch({\n            type: GET_ALL_SERVICES_SUCCESS,\n            payload: {\n                services: data.services\n            }\n        });\n    } else {\n        dispatch({\n            type: GET_ALL_SERVICES_ERROR,\n            payload: {\n                services: [],\n\n            }\n        });\n    }\n\n\n}\nexport const deleteServiceFromApartmentAction = (apartmentId, serviceId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.deleteServiceFromApartmentAction(apartmentId, serviceId);\n    if (data.status === 'ok') {\n        dispatch({\n            type: REMOVE_SERVICE_FROM_APARTMENT_SUCCESS,\n            payload: {\n                apartmentId, serviceId\n            }\n        });\n    } else {\n        dispatch({\n            type: REMOVE_SERVICE_FROM_APARTMENT_ERROR,\n            payload: {\n                error: true,\n                loading: false\n            }\n        })\n    }\n}\n\nexport const getServicesForApartmentAction = (apartmentId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.getServicesForApartment(apartmentId);\n    if (data.status == 'ok') {\n        dispatch({\n            type: GET_SERVICE_TO_APARTMENT_SUCCESS,\n            payload: {\n                services: data.services,\n                error: false,\n                loading: false\n            }\n        });\n    } else {\n        dispatch({\n            type: GET_SERVICE_TO_APARTMENT_ERROR,\n            payload: {\n                services: [],\n                error: true,\n                loading: false,\n            }\n        });\n    }\n}\n\nexport const addSubWayAction = ({ name, geo }) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.addSubway(name, geo);\n    if (data.status === 'ok') {\n        dispatch({\n            type: ADD_SUBWAY_SUCCESS,\n            payload: {\n\n                //TODO: msg из data\n                msg: 'Вы успешно добавили новое метро'\n            }\n        })\n    } else {\n        dispatch({\n            type: ADD_SUBWAY_ERROR,\n            payload: {\n                msg: data.msg || 'произошла серверная ошибка при добавлении метро'\n            }\n        });\n    }\n}\n\nexport const removeSubWayFromApartmentAction = (apartmentId, subwayId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.removeSubWayFromApartment(apartmentId, subwayId);\n    if (data.status === 'ok') {\n        dispatch({\n            type: REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS,\n            payload: {\n                subway: data.subway\n            }\n        });\n    } else {\n        dispatch({\n            type: REMOVE_SUBWAY_FROM_APARTMENT_ERROR\n        });\n    }\n}\n\nexport const deleteApartmentByIdAction = (apartmentId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.deleteApartmentById(apartmentId);\n    console.log(data);\n    if (data.status == 'ok') {\n        dispatch({\n            type: DELETE_APARTMENT_BY_ID_SUCCESS\n        });\n    } else {\n        dispatch({ type: DELETE_APARTMENT_BY_ID_ERROR });\n    }\n\n\n}\nexport const addSubwayForApartmentAction = (addedSubwayId, apartmentId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.addSubwayForApartment(addedSubwayId, apartmentId);\n    console.log({ data });\n    if (data.status == 'ok') {\n        dispatch({\n            type: ADD_SUBWAY_TO_APARTMENT_SUCCESS,\n            payload: {\n                subway: data.subway\n            }\n        })\n    } else {\n        dispatch({\n            type: ADD_SUBWAY_TO_APARTMENT_ERROR\n        })\n    }\n}\n\nexport const getAllSubWaysAction = (apartmentId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.getAllSubway(apartmentId);\n    if (data.status == 'ok') {\n        dispatch({\n            type: GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS,\n            payload: {\n                subways: data.subways,\n                error: false,\n                loading: false\n            }\n        });\n    } else {\n        dispatch({\n            type: GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR,\n            payload: {\n                subways: [],\n                error: true,\n                loading: false\n            }\n        });\n    }\n}\nexport const addNewImageToApartmentAction = (apartmentId, imageFileArray) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.addNewImageToApartment(apartmentId, imageFileArray);\n    console.log(data);\n    if (data.status == 'ok') {\n        dispatch({\n            type: IMAGE_ADD_TO_APARTMENT_SUCESS,\n        });\n    } else {\n        dispatch({\n            type: IMAGE_ADD_TO_APARTMENT_FAIL,\n        });\n    }\n}\nexport const updateBasicApartmentFieldsAction = (apartmentId, fields) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.updateApartmentById(apartmentId, fields);\n    console.log({ data });\n    dispatch({\n        type: UPDATE_BASIC_FIELDS_SUCCESS\n    });\n\n};\n\nexport const deleteApartmentImageByIndexAction = (apartmentId, imageIndex) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.deleteApartmentImageByIndex(apartmentId, imageIndex);\n    console.log(data);\n    if (data.status == 'ok') {\n        dispatch({\n            type: DELETE_APARTMENT_IMAGE_SUCCESS,\n            payload: {\n                imageIndex\n            }\n        });\n    } else {\n        dispatch({\n            type: DELETE_APARTMENT_IMAGE_ERROR\n        });\n    }\n\n}\nexport const getApartmentByIdAction = (apartmentId) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.getApartmentById(apartmentId);\n    if (data.status === 'ok') {\n        // servicesForCurrentApartment: servicesForCurrentApartmentAfterDelete,\n        dispatch({\n            type: GET_APARTMENT_BY_ID,\n            payload: {\n\n                apartment: data.apartment,\n                loading: false,\n                error: false\n            }\n        });\n    } else {\n        dispatch({\n            type: GET_APARTMENT_BY_ID_ERROR,\n            payload: {\n                error: true,\n                loading: false,\n                data: {}\n            }\n        })\n    }\n\n}\n\nexport const clearOrderEventAction = () => async (dispatch, getState) => {\n    dispatch({\n        type: CLEAR_ORDER_EVENT\n    });\n}\nexport const createApartmentAction = (formDataObject) => async (dispatch, getState) => {\n    let { data } = await getState().serviceUtilContainer.createApartment(formDataObject);\n\n    if (data.status === 'ok') {\n\n        dispatch({\n            type: CREATE_APARTMENT, payload: {\n                ...data,\n            }\n        });\n    } else {\n        dispatch({\n            type: CREATE_APARTMENT_ERROR, payload: {\n                error: {\n                    msg: data.msg || 'произошла ошибка при попытке создать новый адрес'\n                }\n            }\n        })\n    }\n\n}\n\nexport const getAllApartmentsAction = () => async (dispatch, getState) => {\n    try {\n        let { data } = await getState().serviceUtilContainer.getAllApartments();\n        if (data.status == 'ok') {\n            dispatch({\n                type: GET_APARTMENTS,\n                payload: {\n                    apartments: data.apartments,\n                    error: false,\n                    loading: false\n                }\n            })\n        } else {\n            dispatch({\n                type: GET_ALL_APARTMENT_ERROR,\n                payload: {\n                    error: true,\n                    loading: false\n                }\n            });\n        }\n\n    } catch (e) {\n        dispatch({\n            type: GET_ALL_APARTMENT_ERROR,\n            payload: {\n                error: true,\n                loading: false\n            }\n        })\n    }\n}\nexport const updateStatusAction = (selectedStatus, orderId) => async (dispatch, getState) => {\n    try {\n        let data = await getState().serviceUtilContainer.updateOrderStatus(selectedStatus, orderId);\n        if (data.status === 'ok') {\n            dispatch({\n                type: UPDATE_ORDER_STATUS,\n                payload: {\n                    status: \"ok\"\n                }\n            });\n        } else {\n            dispatch({\n                type: GENERAL_ERROR,\n                payload: {\n                    status: \"error\",\n\n                }\n            });\n        }\n    } catch (e) {\n        dispatch({ type: GENERAL_ERROR });\n    }\n}\nexport const getOrdersAction = (page, { filterObject }) => async (dispatch, getState) => {\n    try {\n        page = page || 1;\n        // add filter params = fromDate, toDate\n        console.log('DISPATCHED FILTER OBJECT NOW', filterObject);\n        localStorage.setItem('from_date', filterObject.fromDate);\n        localStorage.setItem('to_date', filterObject.toDate);\n        let data = await getState().serviceUtilContainer.getOrders(page, { filterObject });\n        if (data.status == 'ok') {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    data: data.orders,\n                    loading: false,\n                    error: false\n                }\n            });\n        } else {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    data: [],\n                    msg: 'Не удалось получить ни одного заказа',\n                    loading: false,\n                    error: true\n                }\n            })\n        }\n\n    } catch (e) {\n        dispatch({\n            type: GET_ORDERS,\n            payload: {\n                data: [],\n                loading: false,\n                error: true,\n                msg: 'Не удалось получить ни одного заказа'\n            }\n        });\n    }\n}","import { useField } from 'react-hooks-lib';\nimport { useDispatch } from 'react-redux';\nimport { updateStatusAction } from '../reducers/actions';\nimport './order.css';\n\nconst statuses = {\n    0: 'Новый заказ',\n    1: 'Аннулирован',\n    2: 'Совершен'\n};\nexport const OrderComponent = ({ id, className, fullInfo, status }) => {\n    //TODO: найти песню i like being\n    const { client, rooms } = fullInfo;\n    let copiedClient = client || {};\n    //TODO: сделать пагинацию в двух классах Service и Dummy\n    const { value: selectedStatus, bind } = useField(status + '');\n    const dispatch = useDispatch();\n    const handleChangeStatus = () => {\n        // dispatch async ...\n        dispatch(updateStatusAction(selectedStatus, id));\n    }\n    return (<div className={`order-container ${className ? className : ''}`}>\n        <div className={`order ${status == 0 ? 'order__status-new' : ''}`}>\n            <div className=\"order__client\">\n                <h3>Клиент</h3>\n                <div className=\"order__client-info \">\n                    <span className=\"order__client-field\">Имя:{copiedClient.name}</span>\n                    <span className=\"order__client-field\">Фамилия:{copiedClient.secondName}</span>\n                    <span className=\"order__client-field\">Возраст:{copiedClient.age}</span>\n                    <span className=\"order__client-field\">Телефон:{copiedClient.phone}</span>\n                    <span className=\"order__client-field\">mail:{copiedClient.email}</span>\n                </div>\n            </div>\n            <div className=\"order__apartments\">\n                <div className=\"order__apartments-items\">\n                    <h3 className=\"order__apartments-header\"><span>Квартиры</span><span> Статус : {statuses[status]}</span></h3>\n                    {\n                        Array.isArray(rooms) && rooms.map((room, index) => {\n                            return (<div className=\"order__apartments-item\" key={index}>\n                                <span className=\"order__apartment-field\">адрес:{room.address}</span>\n                                <span className=\"order__apartment-field\">кол-во гостей:{room.personsAmount}</span>\n                                <span className=\"order__apartment-field\">Наличие животных: {room.withAnimals ? 'Да' : 'Нет'}</span>\n                                <span className=\"order__apartment-field\">Дети:{room.withChilds ? 'Да' : 'Нет'}</span>\n                                {/* TODO: сделать тут услуги из бд-ки */}\n                                <span className=\"order__apartment-field\">Услуги:</span>\n                                <span className=\"order__apartment-field\">Время заезда:{room.fromDate}</span>\n                                <span className=\"order__apartment-field\">Время выезда:{room.toDate}</span>\n                                <span className=\"order__apartment-field\">Цена за апартаменты:{room.price}</span>\n                                <span className=\"order__apartment-field\">Цена c учетом услуг:{room.totalPrice}</span>\n                            </div>)\n                        })\n                    }\n                    <div className=\"order__status-btn-container\">\n                        <select className=\"order__status-selector\" {...bind}>\n                            {\n                                Object.keys(statuses).map((statusId) => {\n                                    return <option key={statusId} value={statusId}>{statuses[statusId]}</option>\n                                })\n                            }\n                        </select>\n                        <button className=\"order__status-btn\" onClick={handleChangeStatus}>Сменить статус </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>);\n}","import { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nconst routes = [{ path: '/orders', title: 'Заказы' }, { path: '/apartments', title: 'Квартиры' }, { path: '/subways', title: 'Метро' }, { path: '/services', title: 'Услуги' }];\n\nexport const NavigationComponent = () => {\n    const { isAuth } = useSelector(state => state);\n    return (<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item active\">\n                    <Link className=\"nav-link\" to=\"/\">Главная <span className=\"sr-only\"></span></Link>\n                </li>\n                <li className=\"nav-item\">\n                    {!isAuth && <Link className=\"nav-link\" to=\"/login\" >Войти</Link>}\n                    {isAuth && <Link className=\"nav-link\" to=\"/logout\">Выйти</Link>}\n                </li>\n                {isAuth && routes.map((item) => {\n                    return (<li className=\"nav-item\">\n                        <Link className=\"nav-link\" to={item.path} >{item.title}</Link>\n                    </li>)\n                })}\n            </ul>\n        </div>\n    </nav>)\n}","import { useState } from 'react';\nimport moment from 'moment';\nimport './filterorder.css';\n\n\nexport const FilterOrderComponent = ({ curentFilter, filterHandleChange }) => {\n    let initialFromDate = moment.unix(curentFilter.fromDate).format(\"YYYY-MM-DD\");\n    let initialToDate = moment.unix(curentFilter.toDate).format(\"YYYY-MM-DD\");\n    const [fromDate, setFromDate] = useState(initialFromDate);\n    const [toDate, setToDate] = useState(initialToDate);\n    const handleFromDateChange = (e) => {\n        setFromDate(e.target.value);\n    }\n    const handleToDateChange = (e) => {\n        setToDate(e.target.value);\n    }\n    return (<div className=\"filter-container\" >\n        <div className=\"filter-container__item date-from-container\">\n            <label>заселение от:</label>\n            <input type=\"date\" name=\"trip-start\" onChange={handleFromDateChange} value={fromDate} />\n        </div>\n        <div className=\"filter-container__item date-to-container\">\n            <label>заселение по:</label>\n            <input type=\"date\" name=\"trip-start\" value={toDate} onChange={handleToDateChange} />\n        </div>\n        <div className=\"filter-container__item\">\n            <button className=\"btn btn-primary\" onClick={() => {\n                filterHandleChange({ fromDate, toDate })\n            }}>Фильтровать</button>\n        </div>\n    </div>\n    );\n}","export const AspireComponent = () => {\n    return (<div style={{\n        position: 'fixed',\n        top: 0,\n        zIndex: 10,\n        left: '85%',\n\n    }}>\n        <img style={{\n            width: '200px',\n            borderRadius: '50%',\n            height: '200px'\n        }} src=\"https://i.pinimg.com/originals/32/62/b5/3262b55de055134f1a10f886c30c808f.jpg\" />\n    </div>);\n}","import { NavigationComponent } from '../components/NavigationComponent';\nimport { AspireComponent } from '../components/AspireComponent';\n\nexport const Header = () => {\n    return (<div className=\"header\" >\n        <AspireComponent />\n        <NavigationComponent />\n    </div>)\n}","\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { OrderComponent } from '../components/OrderComponent';\nimport { FilterOrderComponent } from '../components/FilterOrderComponent';\nimport { getOrdersAction } from '../reducers/actions';\nexport const OrderPage = () => {\n    const dispatch = useDispatch();\n    const [curPage, setPage] = useState(1);\n    localStorage.getItem('from_date');\n    localStorage.getItem('to_date');\n    const [filterObject, setFilterObject] = useState({\n        fromDate: localStorage.getItem('from_date') ? localStorage.getItem('from_date') : new Date().getTime() / 1000,\n        toDate: localStorage.getItem('to_date') ? localStorage.getItem('to_date') : new Date().getTime() / 1000 + 30 * 24 * 3600\n    });\n    const handleFilterChange = ({ fromDate, toDate }) => {\n        let unixFromDate = Date.parse(fromDate) / 1000;\n        let unixToDate = Date.parse(toDate) / 1000;\n        // затем setим filterObject  фильтр в надежде что заработает\n        setFilterObject({\n            fromDate: unixFromDate,\n            toDate: unixToDate\n        });\n    }\n    useEffect(() => {\n        //TODO: check protected\n        // ! получаем  заказы\n        dispatch(getOrdersAction(curPage, { filterObject }));\n    }, [curPage, filterObject]);\n    const { data: orders, loading, error } = useSelector((store) => store.orders);\n\n    function OrderList() {\n        return (orders && orders.map((item, i) => {\n            return <OrderComponent id={item.id} className=\"main-container__item\" fullInfo={item.fullInfo} status={item.status} key={i} />\n        }));\n\n    }\n    return (\n        <section className=\"app\">\n            <div className=\"paddinger\" >\n                {/*//TODO: добавить  в фильтр поле статус !!!  */}\n                <FilterOrderComponent curentFilter={{ ...filterObject }} filterHandleChange={handleFilterChange} />\n            </div>\n            <main className=\"main-container\">\n                {error && <pre>{JSON.stringify(error)}</pre>}\n                <OrderList />\n            </main>\n            <nav className=\"main-navigation\" aria-label=\"Orders navigation \">\n                <ul className=\"pagination\">\n                    <li className=\"page-item\">\n                        <a className=\"page-link my-link\" onClick={(e) => {\n                            e.preventDefault();\n                            if (curPage <= 0) {\n                                return;\n                            } else {\n                                setPage((p) => p - 1);\n                            }\n                        }} aria-label=\"Previous\">\n                            <span aria-hidden=\"true\">&laquo;</span>\n                            <span className=\"sr-only\">Previous</span>\n                        </a>\n                    </li>\n                    <li className=\"page-item \"><a className=\"page-link\" href=\"!#\">...</a></li>\n                    <li className=\"page-item\">\n                        <a className=\"page-link my-link\" onClick={(e) => {\n                            e.preventDefault();\n                            setPage((p) => p + 1);\n                        }} aria-label=\"Next\">\n                            <span aria-hidden=\"true\">&raquo;</span>\n                            <span className=\"sr-only\" >Next</span>\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n        </section>\n    );\n}","\nimport axios from 'axios';\nimport { useEffect, useState, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useField } from 'react-hooks-lib';\nimport { BsXCircle } from 'react-icons/bs';\nimport './apartmentpage.css';\nimport { objectHasProps } from '../util/helpers';\n\n\nimport { adressFilterChangeAction, addServiceToApartmentAction, clearOrderEventAction, getAllServiceAction, createApartmentAction, deleteServiceFromApartmentAction, getServicesForApartmentAction, removeSubWayFromApartmentAction, deleteApartmentByIdAction, addSubwayForApartmentAction, deleteApartmentImageByIndexAction, getAllSubWaysAction, getAllApartmentsAction, getApartmentByIdAction, updateBasicApartmentFieldsAction, addNewImageToApartmentAction } from '../reducers/actions';\nimport { BrowserRouter, Redirect, Link, Route, Switch, useParams, useRouteMatch } from 'react-router-dom';\n\n\nexport function useApartmentUpdate(apartmentId, apartment) {\n    const [editFields, setEditFields] = useState({\n        address: '',\n        price: 2500,\n        roomAmount: 1,\n        isVip: \"0\",\n        maxperson: 6,\n        subways: [],\n    });\n    useEffect(() => {\n        // console.log(objectHasProps(apartment,['address','price','roomAmount','isVip','Subways']));\n        if (objectHasProps(apartment, ['address', 'price', 'roomAmount', 'isVip', 'maxperson', 'Subways'])) {\n            setEditFields({\n                address: apartment.address,\n                price: apartment.price,\n                roomAmount: apartment.roomAmount,\n                isVip: apartment.isVip ? \"1\" : \"0\",\n                subways: apartment.Subways,\n                maxperson: apartment.maxperson\n            });\n        }\n    }, [apartment, apartmentId]);\n    return [editFields, setEditFields];\n}\n\nconst EditApartment = () => {\n    let { apartmentId } = useParams();\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(getApartmentByIdAction(apartmentId))\n    }, [apartmentId]);\n\n    const { data: apartment, error, loading } = useSelector((state) => state.apartment);\n    const { apartmentImageDeleted, removeSubWayFromApartmentSuccess, successfullyAdded, deletedApartmentSuccess } = useSelector((state) => state.popupInfo);\n    const [editFields, setEditFields] = useApartmentUpdate(apartmentId, apartment);\n    const handleBasicFieldsChange = (e) => {\n        setEditFields((prevState) => {\n            return {\n                ...prevState,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n    // добавляем image для текущей комнаты\n    const [addedImages, setAddedImages] = useState([]);\n    const [preloadedUrls, setPreloadedUrls] = useState([]);// preloaded urls\n    const handleShowAddPreview = (e) => {\n        let files = e.target.files;\n        if (files.length > 0) {\n            let src = URL.createObjectURL(e.target.files[0]);\n            if (preloadedUrls.length < 10) {\n                setPreloadedUrls([...preloadedUrls, src]);\n            }\n            setAddedImages((prevState) => {\n                return [...prevState, e.target.files[0]];\n            });\n        }\n    }\n    if (removeSubWayFromApartmentSuccess) { // при успешном удалении перезагрузить\n        console.log('SUCCESSFULLY REMOVED SUBWAY FROM APARTMENT');\n    }\n    if (successfullyAdded) {// после добавления изображений\n        console.log('SUCCESSFULLY ADDED IMAGE')\n    }\n    if (deletedApartmentSuccess) {// после удаления квартиры\n        return <Redirect to='/apartments' />;\n    }\n    if (apartmentImageDeleted) {// после каждого удаления изображения\n        console.log('SUCCEFULLY DELETED IMAGE');\n    }\n    const handleEditApartment = (e) => {\n\n        dispatch(updateBasicApartmentFieldsAction(apartmentId, editFields));\n    }\n    function apartmentHasImage(apartment) {\n        return apartment.images && apartment.images.length\n    }\n    const handleDeleteImage = (imageIndex) => {\n        dispatch(deleteApartmentImageByIndexAction(apartmentId, imageIndex));\n    }\n\n    const handleAddImagesToApartment = () => {\n        dispatch(addNewImageToApartmentAction(apartmentId, [...addedImages]));\n    }\n    const handleDeleteApartment = () => {\n        dispatch(deleteApartmentByIdAction(apartmentId));\n    }\n\n    const handleDeleteSubWayFromApartment = (subwayId) => {\n        dispatch(removeSubWayFromApartmentAction(apartmentId, subwayId));\n    }\n\n    return (\n        <div className=\"edit-apartment-container\">\n            <div className=\"edit-apartmentcontainer__item form-group\">\n                <label htmlFor={\"apartment-adress-\" + apartmentId}>Адрес:</label>\n                <input id={\"apartment-adress-\" + apartmentId} type=\"text\" className=\"form-control\"\n                    value={editFields.address}\n                    name=\"address\"\n                    onChange={handleBasicFieldsChange}\n                />\n            </div>\n            <div className=\"edit-apartmentcontainer__item form-group\">\n                <label htmlFor={\"apartment-amount-\" + apartmentId}>Количество комнат:</label>\n                <input id={\"apartment-amount-\" + apartmentId} type=\"text\" className=\"form-control\"\n                    value={editFields.roomAmount}\n                    name=\"roomAmount\"\n                    onChange={handleBasicFieldsChange}\n                />\n            </div>\n            <div className=\"edit-apartmentcontainer__item form-group\">\n                <label htmlFor={\"apartment-max-person-\" + apartmentId}>Максимальное кол-во гостей:</label>\n                <input id={\"apartment-max-person-\" + apartmentId} type=\"text\" className=\"form-control\"\n                    value={editFields.maxperson}\n                    name=\"maxperson\"\n                    onChange={handleBasicFieldsChange}\n                />\n            </div>\n            <div className=\"edit-apartmentcontainer__item form-group\">\n                <label htmlFor={\"apartment-price-\" + apartmentId}>Цена:</label>\n                <input id={\"apartment-price-\" + apartmentId} type=\"text\" className=\"form-control\"\n                    value={editFields.price}\n                    name=\"price\"\n                    onChange={handleBasicFieldsChange}\n                />\n            </div>\n\n            <div className=\"edit-apartmentcontainer__item form-group edit-apartmentcontainer__item--added-image\">\n                <div className=\"custom-file\">\n                    <input type=\"file\" className=\"custom-file-input\"\n                        id={\"add-image-input\" + apartmentId}\n                        onChange={handleShowAddPreview}\n                    />\n                    <label className=\"custom-file-label\" htmlFor={\"add-image-input\" + apartmentId}>Choose file</label>\n                </div>\n                <div className=\"container\" >\n                    <button className=\"btn btn-success\" onClick={handleAddImagesToApartment} style={{ fontWeight: 'bold', fontSize: '16px' }}>+</button>\n                </div>\n            </div>\n            <div className=\"preloaded-image-container\">\n                {preloadedUrls.map((item, index) => {\n                    return <div className=\"preloaded-image-container__item\" key={index} ><img className=\"img-thumbnail apartment-image\" src={item} /></div>\n                })}\n            </div>\n            <div className=\"edit-apartmentcontainer__item form-group\">\n                <label htmlFor={\"apartment-status-\" + apartmentId}>Статус квартиры:</label>\n                <select className=\"form-control\" id={\"apartment-status-\" + apartmentId}\n                    name=\"isVip\"\n                    value={editFields.isVip}\n                    onChange={handleBasicFieldsChange}\n                >\n                    <option value=\"1\">VIP</option>\n                    <option value=\"0\">Эконом</option>\n                </select>\n            </div>\n            <div className=\"all-subway-for-apartment-container d-flex\">\n\n                {(editFields.subways && editFields.subways.length) ?\n                    editFields.subways.map((subWayItem) => {\n                        return <span className=\"badge badge-light p-3 m-2 subway-item\" key={subWayItem.id}>\n                            {subWayItem.name}\n                            <BsXCircle onClick={() => handleDeleteSubWayFromApartment(subWayItem.id)} className=\"subway-item-icon\" />\n                        </span>\n                    }) : null\n                }\n            </div>\n            <EditSubWayInput apartmentId={apartmentId} />\n            <hr />\n            <EditServiceInput apartmentId={apartmentId} />\n            <div className=\"edit-apartmentcontainer__item\">\n                <label className=\"current-apartment-container__field-label\">Фотографии</label>\n                <div className=\"image-container\">\n                    {apartmentHasImage(apartment) ? apartment.images.map((image, imageIndex) => {\n                        return (<div className=\"image-item\" key={imageIndex} >\n                            <div className=\"delete-image\"><span className=\"delete-image-btn\" onClick={() => handleDeleteImage(imageIndex)}>X</span></div>\n                            <img className=\"img-thumbnail apartment-image\" src={image} />\n                        </div>)\n                    }) : null}\n                </div>\n            </div>\n\n\n            <div className=\"current-apartment-container__item\">\n                <div className=\"form-group\">\n                    <button className=\"btn btn-success w-100\" onClick={handleEditApartment}>ИЗМЕНИТЬ</button>\n                    <button className=\"btn btn-danger w-100 my-3\" onClick={handleDeleteApartment} >УДАЛИТЬ КВАРТИРУ</button>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n\n\n\nconst AddApartment = ({ handleAddApartmentListener }) => {\n    const dispatch = useDispatch();\n    const [apartmentFields, setApartmentFields] = useState({\n        address: '',\n        isVip: 0,\n        roomAmount: 1,\n        images: [],\n        price: 2500,\n        maxperson: 6,\n    });\n    const handleMaxPersonChange = (e) => {\n        setApartmentFields((prevState) => {\n            return {\n                ...prevState,\n                maxperson: e.target.value\n            }\n        });\n    }\n    const handleAddressChange = (e) => {\n        setApartmentFields((prevState) => {\n            return {\n                ...prevState,\n                address: e.target.value\n            }\n        });\n    }\n    const handleIsVipChange = (e) => {\n        let value = e.target.value;\n        if (value == \"1\") {\n            setApartmentFields((prevState) => {\n                return {\n                    ...prevState,\n                    isVip: 1\n                }\n            })\n        } else {\n            setApartmentFields((prevState) => {\n                return {\n                    ...prevState,\n                    isVip: 0\n                }\n            })\n        }\n    }\n\n    const handlePriceChange = (e) => {\n        setApartmentFields((prevState) => {\n            return {\n                ...prevState,\n                price: e.target.value\n            }\n        });\n    }\n\n    const handleRoomAmountChange = (e) => {\n        setApartmentFields((prevState) => {\n            return {\n                ...prevState,\n                roomAmount: e.target.value\n            }\n        })\n    }\n    const handleImageLoad = async (e) => {\n        let file = e.target.files[0] || null;\n        if (!file) {\n            return;\n        }\n        setApartmentFields((prevState) => {\n            return {\n                ...prevState,\n                images: prevState.images.concat(file)\n            }\n        });\n    }\n    const handleAddApartment = async (e) => {\n        e.preventDefault();\n        let copyApatrmentsFields = { ...apartmentFields };\n        handleAddApartmentListener(copyApatrmentsFields);\n    }\n    const { createApartmentEvent } = useSelector((state) => state.popupInfo);\n    useEffect(() => {\n        if (createApartmentEvent) {\n            dispatch(clearOrderEventAction());\n        }\n    }, []);\n    const GeneralError = useSelector(state => state.error);\n    return (<>  <div className=\"current-apartment-container__item\">\n        {createApartmentEvent && <div className=\"alert alert-success\">{createApartmentEvent.msg}</div>}\n        {GeneralError && <div className=\"alert alert-danger\">{GeneralError.msg}</div>}\n        <div className=\"current-apartment-container__field\">\n            <label className=\"current-apartment-container__field-label\">Адрес:</label>\n            <input className=\"curretn-apartment-container__field-input form-control\" type=\"text\"\n                onChange={handleAddressChange}\n                value={apartmentFields.address}\n            />\n        </div>\n    </div>\n        <div className=\"current-apartment-container__field\">\n            <label className=\"current-apartment-container__field-label\">Максимальное кол-во гостей</label>\n            <input type=\"number\" className=\"form-control\"\n                value={apartmentFields.maxperson}\n                onChange={handleMaxPersonChange}\n            />\n        </div>\n        <div className=\"current-apartment-container__item\">\n            <div className=\"current-apartment-container__field\">\n                <label className=\"current-apartment-container__field-label\">Статус:</label>\n                <select className=\"custom-select\" onChange={handleIsVipChange} >\n                    <option value=\"1\">VIP</option>\n                    <option value=\"0\">Эконом</option>\n                </select>\n            </div>\n        </div>\n        <div className=\"current-apartment-container__item\">\n            <div className=\"current-apartment-container__field\">\n                <label className=\"current-apartment-container__field-label\" >Количество комнат:</label>\n                <input className=\"curretn-apartment-container__field-input form-control\"\n                    onChange={handleRoomAmountChange}\n                    value={apartmentFields.roomAmount}\n                    type=\"number\" />\n            </div>\n        </div>\n        <div className=\"current-apartment-container__item\">\n            <div className=\"current-apartment-container__field\">\n                <div className=\"custom-file  pointer\" >\n                    <input type=\"file\" className=\"custom-file-input\" id=\"loadapartment-images \" onChange={handleImageLoad} />\n                    <label className=\"custom-file-label\" htmlFor=\"loadapartment-images\">Выберите файл для загрузки фотографии квартиры</label>\n                </div>\n            </div>\n        </div>\n        <div className=\"current-apartment-container__item\">\n            <div className=\"current-apartment-container__field\">\n                <label className=\"current-apartment-container__field-label\">Цена:</label>\n                <input className=\"curretn-apartment-container__field-input form-control\" onChange={handlePriceChange} value={apartmentFields.price} type=\"text\" />\n            </div>\n        </div>\n        <div className=\"current-apartment-container__item\">\n            <div className=\"form-group\">\n                <button className=\"btn btn-success w-100\" onClick={handleAddApartment}>ДОБАВИТЬ</button>\n            </div>\n        </div></>);\n}\n\n\nconst EditServiceInput = ({ apartmentId }) => {\n\n\n    const { data: allServices, error, loading } = useSelector((state) => state.services);\n    const { data: services } = useSelector(state => state.servicesForCurrentApartment);\n    const { value: selectedServiceId, bind } = useField('null');\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(getAllServiceAction());\n    }, []);\n    useEffect(() => {\n        // dispatch(getServicesForApartmentAction(apartmentId));\n    }, [apartmentId]);\n    const handleAddServiceToApartment = () => {\n        if (!(selectedServiceId == 'null')) {\n            dispatch(addServiceToApartmentAction(apartmentId, selectedServiceId));\n        }\n    }\n    const handleDeleteServiceFromApartment = (apartmentId, serviceId) => {\n        dispatch(deleteServiceFromApartmentAction(apartmentId, serviceId));\n    }\n    return (<div className=\"edit-apartmentcontainer__item d-flex\">\n        <div className=\"apartment-service-container\">\n            {(services && services.length) ? (\n                services.map((item) => {\n                    return <span className=\"apartment-service-container-item\"\n                        key={item.id}>{item.name}<BsXCircle\n                            onClick={() => { handleDeleteServiceFromApartment(apartmentId, item.id) }}\n                            className=\"apartment-service-icon\" /></span>\n                })\n            ) : null}\n        </div>\n        <div className=\"form-group\">\n            <select {...bind} className=\"form-control\" >\n                <option value=\"null\">выберите услугу</option>\n                {allServices.map((serviceInstance) => {\n                    let curServicesIds = services.map((el) => el.id);\n                    if (curServicesIds.includes(serviceInstance.id)) {\n                        return null;\n                    }\n                    return (<option\n                        key={serviceInstance.id}\n                        value={serviceInstance.id}\n                    >{serviceInstance.name}</option>)\n                })}\n            </select>\n        </div>\n        <div className=\"ml-3\">\n            <button disabled={selectedServiceId == 'null'} onClick={handleAddServiceToApartment} className=\"btn btn-success add-subway-btn\">+</button>\n        </div>\n    </div>);\n}\n\nconst EditSubWayInput = ({ apartmentId }) => {\n    const dispatch = useDispatch();\n    const { data: subways, error, loading } = useSelector(state => state.subwaysNotIncludedInApartment);\n    const popupInfo = useSelector(state => state.popupInfo);\n\n    const { value: addedSubway, bind } = useField('null');\n    if (popupInfo.subwayAdded) {// если успешно добавлено метро\n        console.log('SUCCEFULLY ADDED SUBWAY');\n    }\n    const handleAddSubWayToApartment = () => {\n        if (addedSubway == 'null') {\n            return;\n        }\n        // добавляем метро к текущей комнате\n        dispatch(addSubwayForApartmentAction(addedSubway, apartmentId));\n    }\n    useEffect(() => {\n        dispatch(getAllSubWaysAction(apartmentId));\n    }, [apartmentId]);\n\n    return (<div className=\"edit-apartmentcontainer__item d-flex\" >\n        <div className=\"form-group\">\n            <select {...bind} className=\"form-control\" >\n                <option value=\"null\">выберите метро</option>\n                {(subways && subways.length) && (\n                    subways.map((item) => {\n                        return <option key={item.id} value={item.id}>{item.name}</option>\n                    })\n                )}\n            </select>\n        </div>\n        <div className=\"ml-3\">\n            <button onClick={handleAddSubWayToApartment} className=\"btn btn-success add-subway-btn\">+</button>\n        </div>\n    </div>);\n}\n\nexport const ApartmentPage = () => {\n    const dispatch = useDispatch();\n    let { path, url } = useRouteMatch();\n    const { data: apartments, error, loading } = useSelector((state) => state.apartments);\n    const handleAddApartment = (apartmentsField) => {\n        dispatch(createApartmentAction(apartmentsField));\n    }\n    useEffect(() => {\n        dispatch(getAllApartmentsAction());\n    }, []);\n    const [isApartmentFilterShown, setShowApartmentFilter] = useState(false);\n    const { adressField } = useSelector((state) => state.apartmentFilter);\n    const handleApartmentAdressChange = (e) => {\n        let value = e.target.value;\n        dispatch(adressFilterChangeAction(value));\n    }\n    function ApartmentList() {\n        return (apartments && apartments.length) ? apartments.filter((el) => el.address.includes(adressField)).map((apartment) => {\n            return (<li className=\"list-group-item\" key={apartment.id}>\n                <Link to={`${url}/${apartment.id}`}>{apartment.address}</Link></li>)\n        }) : null;\n    }\n    return (\n        <div className=\"apartment-container\"  >\n            <aside className=\"apartment-list-container\">\n                <div className=\"apartment-list-container__item\">\n                    <ul className=\"list-group apartment-list-container__item-list\" >\n                        <li className=\"list-group-item active\"\n                            onClick={() => setShowApartmentFilter(true)}>\n                            {!isApartmentFilterShown && `Все квартиры`}\n                            {isApartmentFilterShown && <input type=\"text\"\n                                onBlur={() => setShowApartmentFilter(false)}\n                                className=\"form-control\"\n                                value={adressField}\n                                onChange={handleApartmentAdressChange}\n                            />}\n                        </li>\n                        <ApartmentList />\n                        {/* {(apartments && apartments.length) ? apartments.filter((el) => el.address.includes(adressField)).map((apartment) => {\n                            return (<li className=\"list-group-item\" key={apartment.id}>\n                                <Link to={`${url}/${apartment.id}`}>{apartment.address}</Link></li>)\n                        }) : null} */}\n\n                        <li className=\"list-group-item\"><Link to='/apartments'>Создать квартиру</Link></li>\n                    </ul>\n                </div>\n                <div className=\"apartment-list-container__item\">\n                </div>\n            </aside>\n            <section className=\"current-apartment-container \">\n                <Switch>\n                    <Route path={path} exact>\n                        <AddApartment handleAddApartmentListener={handleAddApartment} />\n                    </Route>\n                    <Route path={`${path}/:apartmentId`}>\n                        <EditApartment />\n                    </Route>\n                </Switch>\n            </section>\n        </div>\n    )\n}","  export function objectHasProps(obj, props) {\r\n           let isPropsIn = true;\r\n             props.forEach((p)=>{\r\n                if(!(p in obj) ){\r\n                    isPropsIn = false;\r\n                }\r\n             });\r\n             return isPropsIn;\r\n        }","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { submitUserAction } from '../reducers/actions';\r\nexport const LoginPage = () => {\r\n    const dispatch = useDispatch();\r\n    const [userData, setUserData] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n    const handleEmailChange = (e) => {\r\n        setUserData((prevData) => ({\r\n            ...prevData,\r\n            email: e.target.value\r\n        }))\r\n    }\r\n    const handlePassChange = (e) => {\r\n        setUserData((prevData) => ({\r\n            ...prevData,\r\n            password: e.target.value\r\n        }));\r\n    }\r\n    const handleSubmit = () => {\r\n        dispatch(submitUserAction(userData.email, userData.password));\r\n    }\r\n\r\n    const { isAuth } = useSelector(state => state);\r\n    const { authError } = useSelector((state) => state.popupInfo);\r\n    if (isAuth) {\r\n        return <Redirect to=\"/orders\" />\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"my-3\">\r\n                {authError && <div className=\"alert alert-danger\">{authError.msg}</div>}\r\n            </div>\r\n            <div className=\"form-group\">\r\n\r\n                <div className=\"my-3\">\r\n                    <input type=\"text\"\r\n                        value={userData.email}\r\n                        onChange={handleEmailChange}\r\n                        placeholder=\"email\"\r\n                        className=\"form-control \" />\r\n                </div>\r\n                <div className=\"my-3\">\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"pass\"\r\n                        value={userData.password}\r\n                        onChange={handlePassChange}\r\n                        className=\"form-control \" />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <button className=\"btn btn-primary w-100\" onClick={handleSubmit}>Войти</button>\r\n            </div>\r\n        </div>);\r\n}","\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { renameSubWayAction, handleDeleteSubWayAction, addSubWayAction, getAllSubWaysAction } from '../reducers/actions'\nimport './subway.css';\n\n\n\n\nexport const SubWayPage = () => {\n    const [subWayFields, setSubWayFields] = useState({\n        name: '',\n        geo: ''\n    });\n\n    const dispatch = useDispatch();\n    const { error, success } = useSelector((state) => state.popupInfo);\n    const changeSubNameHandler = (e) => {\n        setSubWayFields((prevState) => {\n            return {\n                ...prevState,\n                name: e.target.value\n            }\n        });\n    }\n    const changeSubWayGeo = (e) => {\n        let fullStr = e.target.value;\n        setSubWayFields((prevState) => {\n            return {\n                ...prevState,\n                geo: fullStr\n            }\n        })\n    }\n    const handleAddSubWay = () => {\n        dispatch(addSubWayAction(subWayFields));\n    }\n    const { data: subways, error: subwayError, loading } = useSelector((state) => state.subwaysNotIncludedInApartment);\n    const handleDeleteSubWay = (subwayId) => {\n        dispatch(handleDeleteSubWayAction(subwayId));\n    }\n    useEffect(() => {\n        dispatch(getAllSubWaysAction())\n    }, []);\n\n    const handleSubWayNameChange = (subwayId, name) => {\n        dispatch(renameSubWayAction(subwayId, name));\n    };\n    const [curSubWayChangeId, setCurSubChangeId] = useState(null);\n    return (<div className=\"subway-container d-flex\">\n        <aside className=\"all-subways\">\n            <ul className=\"list-group apartment-list-container__item-list\">\n                <li className=\"list-group-item active\" >Список метро</li>\n                {(subways && subways.length) ? subways.map((item) => {\n                    return (\n                        <li className={`list-group-item d-flex justify-content-between ${(item.id === curSubWayChangeId) ? 'active' : ''}`}\n                            key={item.id} onClick={() => {\n                                setCurSubChangeId(item.id);\n                            }}>\n                            {item.id === curSubWayChangeId ? <input type=\"text\"\n                                onBlur={() => {\n                                    setCurSubChangeId(null);\n                                    dispatch(getAllSubWaysAction())\n                                }}\n                                className=\"form-control mr-3\"\n                                onChange={(e) => {\n                                    handleSubWayNameChange(item.id, e.target.value);\n                                }}\n                            /> : <span >{item.name}</span>\n                            }\n\n                            <button className=\"btn btn-danger\"\n                                onClick={(e) => { e.stopPropagation(); handleDeleteSubWay(item.id) }}>x</button>\n                        </li>)\n\n                }) : null}\n            </ul>\n        </aside>\n        <section className=\"subway-create-metro\" >\n            {success && <div className=\"alert alert-success\">{success.msg}</div>}\n            {error && <div className=\"alert alert-danger\">{error.msg}</div>}\n            <div className=\"form-group \">\n                <input className=\"form-control \" type=\"text\"\n                    value={subWayFields.name}\n                    onChange={changeSubNameHandler}\n                    placeholder=\"Название метро\" />\n                <textarea className=\"form-control  my-3\"\n                    value={subWayFields.geo}\n                    onChange={changeSubWayGeo}\n                    placeholder=\"Введите координаты метро через запятую Например 124,243  это будет [lat,long]\" />\n                <button className=\"btn btn-success  my-1\" onClick={handleAddSubWay}>Сохранить метро</button>\n            </div>\n        </section>\n    </div>);\n}","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAllServiceAction, deleteServiceAction, addServiceAction, updateServiceNameAction } from '../reducers/actions'\r\nimport './subway.css';\r\n\r\n\r\nexport const ServiceForApartmentPage = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [servicesName, setServicesName] = useState('');\r\n    const handleServicesNameChange = (e) => {\r\n        setServicesName(e.target.value);\r\n    }\r\n    const handleAddService = (e) => {\r\n        dispatch(addServiceAction(servicesName));\r\n    }\r\n\r\n    const { data: allServices, error, loading } = useSelector((state) => state.services);\r\n\r\n    const [curServiceId, setCurServiceId] = useState(null);\r\n    const [chosenServiceName, setChosenServiceName] = useState('');\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllServiceAction());\r\n    }, []);\r\n\r\n    const handleCurentServiceChoose = (id, name) => {\r\n        setCurServiceId(id);\r\n        setChosenServiceName(name);\r\n    }\r\n    const handleDeleteService = (serviceId) => {\r\n        dispatch(deleteServiceAction(serviceId));\r\n    }\r\n    const handleBlurChange = () => {\r\n        if (curServiceId) {\r\n            dispatch(updateServiceNameAction(curServiceId, chosenServiceName));\r\n        }\r\n        setCurServiceId(null);\r\n    }\r\n    const { addNewServiceSuccess } = useSelector(state => state.popupInfo);\r\n    return (<div className=\"subway-container d-flex\">\r\n        <aside className=\"all-subways\">\r\n            <ul className=\"list-group apartment-list-container__item-list\">\r\n                <li className=\"list-group-item active\">Список услуг</li>\r\n                {(allServices && allServices.length) ? (\r\n                    allServices.map((item) => {\r\n                        if (curServiceId == item.id) {\r\n                            return (<li\r\n                                key={item.id} className=\"list-group-item active\"><input\r\n                                    type=\"text\"\r\n                                    onBlur={handleBlurChange}\r\n                                    className=\"form-control\"\r\n                                    value={chosenServiceName}\r\n                                    onChange={(e) => setChosenServiceName(e.target.value)}\r\n                                /></li>)\r\n                        }\r\n                        return <li className=\"list-group-item d-flex justify-content-between\"\r\n                            onClick={() => handleCurentServiceChoose(item.id, item.name)}\r\n                            key={item.id}><span>{item.name}</span><button className=\"btn btn-danger\" onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                handleDeleteService(item.id);\r\n                            }}>x</button></li>\r\n                    })\r\n                ) : null}\r\n            </ul>\r\n        </aside>\r\n        <section className=\"subway-create-metro\" >\r\n            {addNewServiceSuccess && (<div className=\"alert alert-success\">{addNewServiceSuccess.msg}</div>)}\r\n            <div className=\"form-group \">\r\n                <input className=\"form-control \" type=\"text\"\r\n                    value={servicesName}\r\n                    onChange={handleServicesNameChange}\r\n                    placeholder=\"Название услуги\" />\r\n                <button className=\"btn btn-success  my-1\" onClick={handleAddService}>Сохранить услугу</button>\r\n            </div>\r\n        </section>\r\n    </div>);\r\n}","import { useSelector } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\n\nexport const PrivateRoute = ({ children: Component, ...rest }) => {\n    const { isAuth } = useSelector((state) => state);\n    return <Route {...rest}  >\n        {(() => {\n            return isAuth ? Component : <Redirect to='/login' />;\n        })()}\n    </Route>\n}","import { useState, useEffect } from 'react'\nimport { OrderComponent } from './components/OrderComponent';\nimport { NavigationComponent } from './components/NavigationComponent';\nimport { FilterOrderComponent } from './components/FilterOrderComponent';\nimport { AspireComponent } from './components/AspireComponent';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getOrdersAction, logoutAction } from './reducers/actions';\nimport { BrowserRouter as Router, Link, Redirect, Route, Switch, useParams, useRouteMatch } from 'react-router-dom';\nimport { Header } from './routercomponents/Header';\nimport { OrderPage } from './routercomponents/OrderPage';\nimport { ApartmentPage } from './routercomponents/ApartmentPage';\nimport { LoginPage } from './routercomponents/LoginPage';\nimport { SubWayPage } from './routercomponents/SubWayPage';\nimport { ServiceForApartmentPage } from './routercomponents/ServiceForApartmentPage';\nimport { PrivateRoute } from './components/PrivateRoute';\n\nfunction LogOutPage() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(logoutAction());\n  }, []);\n  return <Redirect to=\"/login\" />;\n}\n//TODO : LOGIN PAGE\nfunction App() {\n  function logOut() {\n    localStorage.removeItem('token');\n    return true;\n  }\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route path=\"/logout\">\n          <LogOutPage />\n        </Route>\n        <Route exact path='/login'>\n          <LoginPage />\n        </Route>\n        <PrivateRoute exact path='/orders'>\n          <OrderPage />\n        </PrivateRoute>\n        <Route path='/apartments'>\n          <ApartmentPage />\n        </Route>\n        <Route path='/subways'>\n          <SubWayPage />\n        </Route>\n        <Route path='/services'>\n          <ServiceForApartmentPage />\n        </Route>\n      </Switch>\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport axios from 'axios';\nexport class ServiceUtilContainer {\n    constructor() {\n    }\n    config() {\n        const config = {\n            headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\n        }\n        return config;\n    }\n\n    async renameSubWayById(subWayId, name) {\n        let response = await axios.post('/api/subway/update', { subWayId, name }, this.config());\n        return response;\n    }\n    async getToken(email, pass) {\n        let response = await axios.post('/api/login', {\n            email,\n            pass\n        });\n        return response;\n    }\n    async deleteService(serviceId) {\n        let response = await axios.post('/api/services/delete', {\n            serviceId\n        }, this.config());\n        return response;\n    }\n    async addService(serviceName) {\n        let response = await axios.post('/api/services/create', {\n            serviceName\n        }, this.config());\n        return response;\n    }\n    async deleteSubWayById(subwayId) {\n        let response = await axios.post(`/api/subway/delete/${subwayId}`, {}, this.config());\n        return response;\n    }\n    async updateServiceName(serviceId, newServiceName) {\n        let response = await axios.post('/api/services/update',\n            {\n                serviceId,\n                newServiceName\n            }, this.config());\n        return response;\n    }\n    async addServiceToApartment(apartmentId, selectedServiceId) {\n\n        let response = await axios.post('/api/services/add-to-apartment', {\n            apartmentId,\n            selectedServiceId\n        }, this.config());\n        return response;\n    }\n\n    async getAllServices() {\n        let response = await axios.get('/api/services/all');\n        return response;\n    }\n    async deleteServiceFromApartmentAction(apartmentId, serviceId) {\n        let response = await axios.post('/api/services/remove-from-apartment', {\n            apartmentId,\n            serviceId\n        }, this.config());\n        return response;\n    }\n    async getServicesForApartment(apartmentId) {\n        let response = await axios.get(`/api/services/all-for-apartment/${apartmentId}`, this.config());\n        return response;\n    }\n    async addSubway(name, geo) {\n        let response = await axios.post('/api/subway/add', { name, geo }, this.config());\n        return response;\n    }\n    async removeSubWayFromApartment(apartmentId, subwayId) {\n        let response = await axios.post(`/api/apartments/${apartmentId}/remove-subway/${subwayId}`, this.config());\n        return response;\n    }\n    /*\n    * \n    route(\"/api/subway/all)\" */\n    async getAllSubWays() {\n        let response = await axios.get('/api/subway/all', this.config());\n        return response;\n    }\n    async deleteApartmentById(apartmentId) {\n        let response = await axios.post(`/api/apartments/delete/${apartmentId}`, this.config());\n        return response;\n    }\n    async addSubwayForApartment(addedSubwayId, apartmentId) {\n        let response = await axios.post('/api/apartments-subway/add-to-apartment', {\n            addedSubwayId, apartmentId\n        }, this.config());\n        return response;\n    }\n    async getAllSubway(apartmentId = null) {\n        let url = '/api/apartments-subway/allsubway-for-apartment/';\n        if (typeof apartmentId !== 'null') {\n            url += apartmentId;\n        }\n        let response = axios.get(url, this.config());\n        return response;\n    }\n    async addNewImageToApartment(apartmentId, imageFilesArray) {\n        let formData = new FormData();\n        imageFilesArray.forEach((file, index) => {\n            formData.append(`apartment_added_image_${index}`, file);\n        });\n        let response = await axios.post(`/api/apartments/add-images/${apartmentId}`, formData, this.config());\n        return response;\n    }\n    async updateApartmentById(apartmentId, fields) {\n        let response = await axios.post(`/api/apartments/update-basic-fields/${apartmentId}`, fields, this.config());\n        return response;\n    }\n    async deleteApartmentImageByIndex(apartmentId, imageIndex) {\n        let response = await axios.post(`/api/apartments/delete-image-by-index`, {\n            apartmentId, imageIndex\n        }, this.config());\n        return response;\n    }\n    async getApartmentById(apartmentId) {\n        let response = await axios.get(`/api/apartments/${apartmentId}`, this.config());\n        return response;\n    }\n    async getAllApartments() {\n        let response = await axios.get('/api/apartments/all-without-pagination', this.config());\n        return response;\n    }\n    async createApartment(data) {\n        // формируем formData\n        let formData = new FormData();\n        let index = 1;\n        data.images.forEach((image) => {\n            formData.append(`image_${index}`, image);\n            index++;\n        });\n        delete data['images'];\n        // create formData \n        for (let key in data) {\n            formData.append(key, data[key]);\n        }\n        let response = await axios.post('/api/apartments/create', formData, this.config());\n        return response;\n    }\n    async updateOrderStatus(selectedStatus, orderId) {\n        try {\n            let response = await fetch('/api/order/update-status', {\n                method: 'POST',\n                credentials: 'same-origin', // include, *same-origin, omit\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ selectedStatus, orderId })\n            });\n            let data = response.json();\n            return data;\n        } catch (e) {\n            console.log(e);\n            return {\n                status: 'error'\n            };\n        }\n    }\n    async getOrders(page = 1, { filterObject }) {\n        let finalUrl = '/api/order/all/?limit=5&page=' + page;\n        if (filterObject.fromDate) {\n            finalUrl += '&from=' + filterObject.fromDate\n        }\n        if (filterObject.toDate) {\n            finalUrl += '&to=' + filterObject.toDate;\n        }\n        let { data } = await axios.get(finalUrl, this.config());\n        console.log(filterObject, \"FILTER OBJECT\")\n        return data;\n    }\n}\n\n\nexport class DummyContainer {\n    constructor() {\n    }\n    async updateOrderStatus(selectedStatus, orderId) {\n\n    }\n    async getOrders(page = 1, { filterObject }) {\n        return { \"status\": \"ok\", \"orders\": [{ \"fullInfo\": { \"client\": { \"name\": \"Карл\", \"secondname\": \"Марков\", \"email\": \"dummy@mail.ru\", \"phone\": 88005553535 }, \"rooms\": [{ \"id\": 1, \"address\": \"ул Глупнинская дом 9 кв 104\", \"price\": 3600, \"roomAmount\": 3, \"services\": \"['Уборка','Стирка','Гладка']\", \"withChilds\": true, \"withAnimals\": false }] }, \"id\": 5, \"status\": 0, \"createdAt\": \"2021-01-24T13:39:23.000Z\", \"updatedAt\": \"2021-01-24T13:39:23.000Z\" }, { \"fullInfo\": { \"client\": { \"name\": \"Bob\", \"secondname\": \"Marlie\", \"email\": \"karpov-vb-1996@mail.ru\", \"phone\": 8808555 }, \"rooms\": [{ \"id\": 1, \"address\": \"ул Тушинская дом 3 кв 67\", \"price\": 2800, \"roomAmount\": 3, \"services\": \"['Уборка','Стирка','Гладка']\", \"withChilds\": true, \"withAnimals\": false }] }, \"id\": 11, \"status\": 0, \"createdAt\": \"2021-01-24T14:01:39.000Z\", \"updatedAt\": \"2021-01-24T14:01:39.000Z\" }, { \"fullInfo\": { \"client\": { \"name\": \"Bob\", \"secondname\": \"Marlie\", \"email\": \"karpov-vb-1996@mail.ru\", \"phone\": 8808555 }, \"rooms\": [{ \"id\": 1, \"address\": \"ул Тушинская дом 3 кв 67\", \"price\": 2800, \"personsAmount\": 3, \"roomAmount\": 3, \"services\": \"['Уборка','Стирка','Гладка']\", \"withChilds\": true, \"withAnimals\": false }] }, \"id\": 12, \"status\": 0, \"createdAt\": \"2021-01-24T14:07:52.000Z\", \"updatedAt\": \"2021-01-24T14:07:52.000Z\" }] }\n    }\n}","\nexport function immitateDeletionServiceFromApartment(servicesForCurrentApartment, serviceId) {\n    servicesForCurrentApartment.data = servicesForCurrentApartment.data.filter((item) => {\n        return item.id != serviceId\n    });\n    return servicesForCurrentApartment;\n}\n\nexport function immitateAddServiceToApartment(data,service){\n\tlet copy =  [...data];\n\tlet isServiceAlreadyThere = false;\n            copy.forEach((item)=>{\n                if(item.id ==service.id){\n                        isServiceAlreadyThere = true;\n                }\n\t\t\t});\n\tif(!isServiceAlreadyThere){\n\t\tcopy = [...copy, service];\n    }\n    return copy;\n\n}","import { DummyContainer, ServiceUtilContainer } from \"../util/serviceUtil\";\nimport { GET_TOKEN_SUCCESS, GET_TOKEN_ERROR, DELETE_SUBWAY_BY_ID_SUCCESS, DELETE_SUBWAY_BY_ID_ERROR, IMAGE_ADD_TO_APARTMENT_FAIL, REMOVE_SUBWAY_FROM_APARTMENT_ERROR, ADD_SUBWAY_TO_APARTMENT_ERROR, ADD_SERVICE_TO_APARTMENT_ERROR, UPDATE_SERVICE_NAME_ERROR, UPDATE_SERVICE_NAME_SUCCESS, ADD_SERVICE_TO_APARTMENT_SUCCESS, GET_ALL_SERVICES_SUCCESS, GET_ALL_SERVICES_ERROR, REMOVE_SERVICE_FROM_APARTMENT_SUCCESS, REMOVE_SERVICE_FROM_APARTMENT_ERROR, GET_SERVICE_TO_APARTMENT_ERROR, GET_SERVICE_TO_APARTMENT_SUCCESS, DELETE_APARTMENT_BY_ID_SUCCESS, REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS, GET_ORDERS, CREATE_APARTMENT, ADD_SUBWAY_TO_APARTMENT_SUCCESS, CREATE_APARTMENT_ERROR, GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR, GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS, GET_APARTMENTS, IMAGE_ADD_TO_APARTMENT_SUCESS, GET_APARTMENT_BY_ID, DELETE_APARTMENT_IMAGE_SUCCESS, ADD_SUBWAY_ERROR, ADD_SUBWAY_SUCCESS, UPDATE_BASIC_FIELDS_SUCCESS, DELETE_APARTMENT_BY_ID_ERROR, CLEAR_ORDER_EVENT, ADD_NEW_SERVICE_ERROR, ADD_NEW_SERVICE_SUCCESS, LOG_OUT, CHANGE_APARTMENT_ADRESS_FILTER, DELETE_SERVICE_SUCCESS } from \"./actions\";\nimport { immitateDeletionServiceFromApartment, immitateAddServiceToApartment } from \"./redux-helpers\";\n\n\n// тут только одну переменную меняешь\nlet isDummy = false;\nconst initialState = {\n    isAuth: localStorage.getItem('token') ? true : false,\n    apartmentFilter: {\n        adressField: ''\n    },\n    serviceUtilContainer: !isDummy ? new ServiceUtilContainer() : new DummyContainer(),\n    orders: {\n        data: [],\n        error: false,\n        loading: false\n    },\n    adminToken: localStorage.getItem('token') ? localStorage.getItem('token') : '',\n    subwaysNotIncludedInApartment: {\n        data: [],\n        error: false,\n        loading: false\n    },\n    apartment: {\n        data: {},\n        error: false,\n        loading: false\n    },\n    // услуги типа уборка постель и тд\n    services: {\n        data: [],\n        error: false,\n        loading: false\n    },\n\n    apartments: {\n        data: [],\n        error: false,\n        loading: false\n    },\n    servicesForCurrentApartment: {\n        data: [],\n        error: false,\n        loading: false\n    },\n    popupInfo: {\n    }\n};\n\nconst reducer = (state = initialState, action) => {\n    const { type, payload } = action;\n    switch (type) {\n        case LOG_OUT:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                isAuth: false\n            }\n        case GET_TOKEN_SUCCESS:\n            console.log(payload);\n            localStorage.setItem('token', payload.token);\n            return {\n                ...state,\n                isAuth: true,\n                popupInfo: {}\n            };\n        case GET_TOKEN_ERROR:\n            return {\n                ...state,\n                isAuth: false,\n                popupInfo: {\n                    authError: {\n                        msg: 'Доступ был запрещен'\n                    }\n                }\n            }\n        case CHANGE_APARTMENT_ADRESS_FILTER:\n            return {\n                ...state,\n                apartmentFilter: {\n                    ...state.apartmentFilter,\n                    adressField: payload.adressField\n                }\n            }\n        case ADD_NEW_SERVICE_SUCCESS:\n            let addedService = payload.service;\n            return {\n                ...state,\n                services: {\n                    ...state.services,\n                    data: [...state.services.data, addedService]\n                },\n                popupInfo: {\n                    addNewServiceSuccess: {\n                        msg: 'успешно создана новая услуга'\n                    }\n                }\n            }\n        case ADD_NEW_SERVICE_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    addNewServiceError: {\n                        msg: 'не удалось создать новую услугу'\n                    }\n                }\n            }\n        case CLEAR_ORDER_EVENT:\n            return {\n                ...state,\n                popupInfo: {}\n            }\n        case DELETE_SUBWAY_BY_ID_SUCCESS:\n            return {\n                ...state,\n                subwaysNotIncludedInApartment: {\n                    ...state.subwaysNotIncludedInApartment,\n                    data: payload.subways,\n                }\n            }\n        case DELETE_SUBWAY_BY_ID_ERROR:\n            return {\n                ...state,\n            }\n        case UPDATE_SERVICE_NAME_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    error: {\n                        msg: 'Не удалось обновить данные'\n                    }\n                }\n            };\n        case UPDATE_SERVICE_NAME_SUCCESS:\n            let servicesCopy = [...state.services.data];\n            servicesCopy = payload.services;\n            return {\n                ...state,\n                services: {\n                    ...state.services,\n                    data: servicesCopy\n                },\n                popupInfo: {\n                    updateServiceSuccess: true\n                }\n            }\n        case ADD_SERVICE_TO_APARTMENT_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    error: {\n                        msg: 'при добавлении сервиса к текущей квартире произошла ошибка'\n                    }\n                }\n            }\n        case DELETE_SERVICE_SUCCESS:\n            let deletedServiceId = payload.serviceId;\n            let prevServices = [...state.services.data];\n            try {\n                prevServices = prevServices.filter((item) => item.id != deletedServiceId);\n            } catch (e) {\n                prevServices = [];\n            }\n            return {\n                ...state,\n                services: {\n                    ...state.services,\n                    data: prevServices\n                }\n            };\n        case ADD_SERVICE_TO_APARTMENT_SUCCESS:\n            return {\n                ...state,\n                servicesForCurrentApartment: {\n                    ...state.servicesForCurrentApartment,\n                    data: immitateAddServiceToApartment(state.servicesForCurrentApartment.data, payload.service)\n                },\n                popupInfo: {\n                    serviceAddToApartmentSuccess: true\n                }\n            }\n        case GET_ALL_SERVICES_SUCCESS:\n            return {\n                ...state,\n                services: {\n                    data: payload.services,\n                    error: false,\n                    loading: false\n                },\n            }\n        case GET_ALL_SERVICES_ERROR:\n            return {\n                ...state,\n                services: {\n                    data: [],\n                    error: {\n                        msg: 'Не удалось получить ни одной услуги'\n                    },\n                    loading: false\n                }\n            }\n        case REMOVE_SERVICE_FROM_APARTMENT_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    error: {\n                        msg: 'не удалось удалить услугу произошла ошибка на сервере'\n                    }\n                }\n            }\n        case REMOVE_SERVICE_FROM_APARTMENT_SUCCESS:\n            let servicesForCurrentApartmentAfterDelete = immitateDeletionServiceFromApartment(state.servicesForCurrentApartment, payload.serviceId);\n\n            return {\n                ...state,\n                servicesForCurrentApartment: servicesForCurrentApartmentAfterDelete,\n                popupInfo: {\n                    removeApartmentFromApartmentSuccess: true\n                }\n            }\n        case GET_SERVICE_TO_APARTMENT_SUCCESS:\n            return {\n                ...state,\n\n                servicesForCurrentApartment: {\n                    data: payload.services,\n                    error: false,\n                    loading: false\n                }\n            };\n        case GET_SERVICE_TO_APARTMENT_ERROR:\n            return {\n                ...state,\n                servicesForCurrentApartment: {\n                    data: [],\n                    error: {\n                        msg: 'Не было получено услуг для текущей квартиры'\n                    },\n                    loading: false\n                }\n            };\n        case ADD_SUBWAY_SUCCESS:\n\n            return {\n                ...state,\n                popupInfo: {\n                    success: {\n                        msg: payload.msg\n                    }\n                }\n            }\n        case ADD_SUBWAY_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    error: {\n                        msg: payload.msg\n                    }\n                }\n            };\n        case REMOVE_SUBWAY_FROM_APARTMENT_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    error: {\n                        msg: 'при удалении метро из текущей квартиры произошла ошибка'\n                    }\n                }\n            }\n        case REMOVE_SUBWAY_FROM_APARTMENT_SUCCESS:\n            //TODO: remove subway from current apartment\n            let removedSubway = payload.subway;\n            console.log({ removedSubway });\n            // const { subway } = payload;\n            let subwayAfterDeleted = state.apartment.data.Subways ? state.apartment.data.Subways : [];\n            subwayAfterDeleted = subwayAfterDeleted.filter((item) => item.id != removedSubway.id);\n            return {\n                ...state,\n                apartment: {\n                    ...state.apartment,\n                    data: {\n                        ...state.apartment.data,\n                        Subways: subwayAfterDeleted\n                    }\n                },\n                popupInfo: {\n                    removeSubWayFromApartmentSuccess: true\n                }\n            }\n        case DELETE_APARTMENT_BY_ID_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    deletedApartmentSuccess: false\n                }\n            }\n        case DELETE_APARTMENT_BY_ID_SUCCESS:\n            return {\n                ...state,\n                popupInfo: {\n                    deletedApartmentSuccess: true\n                }\n            }\n        case ADD_SUBWAY_TO_APARTMENT_ERROR:\n            return {\n                ...state,\n                popupInfo: {\n                    subwayAdded: false\n                }\n            }\n        case ADD_SUBWAY_TO_APARTMENT_SUCCESS:\n            const { subway } = payload;\n            let subWaysForCurApartment = state.apartment.data.Subways ? state.apartment.data.Subways : [];\n            subWaysForCurApartment = [...subWaysForCurApartment, subway]; // добавляем в subway для текушей квартиры\n            // и убираем из subwaysNotIncludedInApartment данное метро\n            // state.subwaysNotIncludedInApartment = state.subwaysNotIncludedInApartment.filter((subwayItem) => subwayItem.id != subway.id);\n            let curSubWayInSelector = [...state.subwaysNotIncludedInApartment.data] || [];\n            curSubWayInSelector = curSubWayInSelector.filter((subwayItem) => subwayItem.id !== subway.id);\n\n            return {\n                ...state,\n                subwaysNotIncludedInApartment: {\n                    ...state.subwaysNotIncludedInApartment,\n                    data: curSubWayInSelector\n                },\n                apartment: {\n                    ...state.apartment,\n                    data: {\n                        ...state.apartment.data,\n                        Subways: subWaysForCurApartment\n                    }\n                },\n                popupInfo: {\n                    subwayAdded: true\n                }\n            }\n        case GET_SUBWAY_FOR_CURRENT_APARTMENT_ERROR:\n            return {\n                ...state,\n                subwaysNotIncludedInApartment: {\n                    data: [],\n                    error: true,\n                    loading: false\n                }\n            };\n        case GET_SUBWAY_FOR_CURRENT_APARTMENT_SUCCESS:\n            return {\n                ...state,\n                subwaysNotIncludedInApartment: {\n                    data: payload.subways,\n                    error: false,\n                    loading: false\n                }\n            }\n        case IMAGE_ADD_TO_APARTMENT_FAIL:\n            return {\n                ...state,\n                popupInfo: {\n                    successfullyAdded: false\n                }\n            };\n        case IMAGE_ADD_TO_APARTMENT_SUCESS:\n            return {\n                ...state,\n                popupInfo: {\n                    successfullyAdded: true\n                }\n            };\n        case DELETE_APARTMENT_IMAGE_SUCCESS:\n            let imagesInApartment = [];\n            try {\n\n                imagesInApartment = [...state.apartment.data.images];\n                let imageIndex = payload.imageIndex;\n                imagesInApartment.splice(imageIndex, 1);\n            } catch (e) {\n                imagesInApartment = [];\n            };\n            return {\n                ...state,\n                apartment: {\n                    ...state.apartment,\n                    data: {\n                        ...state.apartment.data,\n                        images: imagesInApartment\n                    }\n                },\n                popupInfo: {\n                    apartmentImageDeleted: true\n                }\n            };\n        case GET_APARTMENT_BY_ID:\n            return {\n                ...state,\n                servicesForCurrentApartment: {\n                    ...state.servicesForCurrentApartment,\n                    data: payload.apartment.Services\n                },\n                apartment: {\n                    error: false,\n                    loading: false,\n                    data: payload.apartment\n                }\n            };\n        case GET_APARTMENTS:\n            return {\n                ...state,\n                apartments: {\n                    ...state.apartments,\n                    data: payload.apartments,\n                    error: false,\n                    loading: false,\n                }\n            }\n        case CREATE_APARTMENT_ERROR:\n            return {\n                ...state,\n                error: {\n                    msg: payload.error.msg\n                },\n                popupInfo: {\n                    msg: 'произошла ошибка при попытке создать квартиру'\n                }\n            };\n        case CREATE_APARTMENT:\n            let newApartment = payload.apartment;\n\n            return {\n                ...state,\n                apartments: {\n                    ...state.apartments,\n                    data: [...state.apartments.data, newApartment],\n                },\n                popupInfo: {\n                    createApartmentEvent: {\n                        msg: 'Квартира была создана успешно'\n                    },\n                }\n            }\n        case GET_ORDERS:\n            return {\n                ...state,\n                orders: {\n                    data: payload.data ? payload.data : [],\n                    error: payload.error,\n                    loading: payload.loading\n                }\n            };\n        case UPDATE_BASIC_FIELDS_SUCCESS:\n            return {\n                ...state\n            }\n        default:\n            return state;\n    }\n\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from 'redux-thunk'\nimport reducer from \"./reducers\";\nimport { BrowserRouter } from 'react-router-dom';\nimport logger from 'redux-logger';\nconst store = createStore(reducer, applyMiddleware(logger, thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}